{"version":3,"sources":["webpack:///static/js/13.b2849e35.chunk.js","webpack:///./src/utils/colors.js?6408***********","webpack:///./~/tinycolor/tinycolor.js?3516***********","webpack:///./~/tinycolor2/tinycolor.js?a7fe***********","webpack:///./~/tinygradient/tinygradient.js?ef35***********","webpack:///./src/scenes/Fela/Block.js","webpack:///./src/scenes/Fela/DifferentBlocks.js"],"names":["webpackJsonp","14","module","exports","__webpack_require__","_interopRequireDefault","obj","__esModule","default","Object","defineProperty","value","_config","_config2","_tinygradient","_tinygradient2","gradient1","rgb","size","gradient2","map","color","i","toHex","15","styles","bold","italic","underline","inverse","black","red","green","yellow","blue","magenta","cyan","white","grey","bgBlack","bgRed","bgGreen","bgYellow","bgBlue","bgMagenta","bgCyan","bgWhite","bgDefault","keys","forEach","style","String","prototype","get","this","enumerable","16","__WEBPACK_AMD_DEFINE_RESULT__","Math","tinycolor","opts","inputToRGB","_originalInput","_r","r","_g","g","_b","b","_a","a","_roundA","mathRound","_format","format","_gradientType","gradientType","_ok","ok","_tc_id","tinyCounter","s","v","l","stringInputToObject","isValidCSSUnit","rgbToRgb","substr","h","convertToPercentage","hsvToRgb","hslToRgb","hasOwnProperty","boundAlpha","mathMin","mathMax","bound01","rgbToHsl","max","min","d","hue2rgb","p","q","t","rgbToHsv","floor","f","mod","rgbToHex","allow3Char","hex","pad2","toString","charAt","join","rgbaToHex","allow4Char","convertDecimalToHex","rgbaToArgbHex","desaturate","amount","hsl","toHsl","clamp01","saturate","greyscale","lighten","brighten","toRgb","darken","spin","hue","complement","triad","tetrad","splitcomplement","analogous","results","slices","part","ret","push","monochromatic","hsv","toHsv","modification","flip","o","flipped","parseFloat","isNaN","n","isOnePointZero","processPercent","isPercentage","parseInt","abs","val","parseIntFromHex","indexOf","c","length","round","convertHexToDecimal","matchers","CSS_UNIT","exec","replace","trimLeft","trimRight","toLowerCase","named","names","match","rgba","hsla","hsva","hex8","hex6","hex4","hex3","validateWCAG2Parms","parms","level","toUpperCase","mathRandom","random","isDark","getBrightness","isLight","isValid","getOriginalInput","getFormat","getAlpha","getLuminance","RsRGB","GsRGB","BsRGB","R","G","B","pow","setAlpha","toHsvString","toHslString","toHexString","toHex8","toHex8String","toRgbString","toPercentageRgb","toPercentageRgbString","toName","hexNames","toFilter","secondColor","hex8String","secondHex8String","formatSet","formattedString","hasAlpha","needsAlphaFormat","clone","_applyModification","fn","args","apply","concat","slice","call","arguments","_applyCombination","fromRatio","newColor","equals","color1","color2","mix","rgb1","rgb2","readability","c1","c2","isReadable","wcag2","wcag2Parms","out","mostReadable","baseColor","colorList","includeFallbackColors","bestColor","bestScore","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","blanchedalmond","blueviolet","brown","burlywood","burntsienna","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","greenyellow","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","whitesmoke","yellowgreen","CSS_INTEGER","CSS_NUMBER","PERMISSIVE_MATCH3","PERMISSIVE_MATCH4","RegExp","undefined","17","__WEBPACK_AMD_DEFINE_FACTORY__","__WEBPACK_AMD_DEFINE_ARRAY__","root","factory","Utils","rgba_max","hsva_max","stepize","start","end","steps","step","k","interpolate","stop1","stop2","gradient","trigonometric","diff","substeps","stops","Error","pos","totalSubsteps","TinyGradient","Array","havingPositions","stop","hasPosition","unshift","reverse","mode","trig","parametrized","css","direction","colors","pop","208","_react","_react2","_reactFela","_colors","_colors2","Block","_ref","className","children","createElement","createComponent","props","minWidth","height","float","textAlign","padding","border","fontWeight","backgroundColor","isPrimary","&:hover","435","_Block","_Block2","components","_loop","component","display","borderRadius"],"mappings":"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","file":"static/js/13.b2849e35.chunk.js","sourcesContent":["webpackJsonp([13],{\n\n/***/ 14:\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _config = __webpack_require__(13);\n\t\n\tvar _config2 = _interopRequireDefault(_config);\n\t\n\tvar _tinygradient = __webpack_require__(17);\n\t\n\tvar _tinygradient2 = _interopRequireDefault(_tinygradient);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar gradient1 = _tinygradient2.default.rgb(['#43C6AC', '#F8FFAE', '#fc00ff', '#CFDEF3', '#3494E6'], _config2.default.size);\n\t\n\tvar gradient2 = _tinygradient2.default.rgb(['#dc2430', '#c2e59c', '#FFB75E', '#7b4397', '#00dbde'], _config2.default.size);\n\t\n\texports.default = gradient1.map(function (color, i) {\n\t  return ['#' + color.toHex(), '#' + gradient2[i].toHex()];\n\t});\n\n/***/ },\n\n/***/ 15:\n/***/ function(module, exports) {\n\n\tvar styles = {\n\t  'bold':      ['\\033[1m', '\\033[22m'],\n\t  'italic':    ['\\033[3m', '\\033[23m'],\n\t  'underline': ['\\033[4m', '\\033[24m'],\n\t  'inverse':   ['\\033[7m', '\\033[27m'],\n\t  'black':     ['\\033[30m', '\\033[39m'],\n\t  'red':       ['\\033[31m', '\\033[39m'],\n\t  'green':     ['\\033[32m', '\\033[39m'],\n\t  'yellow':    ['\\033[33m', '\\033[39m'],\n\t  'blue':      ['\\033[34m', '\\033[39m'],\n\t  'magenta':   ['\\033[35m', '\\033[39m'],\n\t  'cyan':      ['\\033[36m', '\\033[39m'],\n\t  'white':     ['\\033[37m', '\\033[39m'],\n\t  'default':   ['\\033[39m', '\\033[39m'],\n\t  'grey':      ['\\033[90m', '\\033[39m'],\n\t  'bgBlack':   ['\\033[40m', '\\033[49m'],\n\t  'bgRed':     ['\\033[41m', '\\033[49m'],\n\t  'bgGreen':   ['\\033[42m', '\\033[49m'],\n\t  'bgYellow':  ['\\033[43m', '\\033[49m'],\n\t  'bgBlue':    ['\\033[44m', '\\033[49m'],\n\t  'bgMagenta': ['\\033[45m', '\\033[49m'],\n\t  'bgCyan':    ['\\033[46m', '\\033[49m'],\n\t  'bgWhite':   ['\\033[47m', '\\033[49m'],\n\t  'bgDefault': ['\\033[49m', '\\033[49m']\n\t}\n\tObject.keys(styles).forEach(function(style) {\n\t  Object.defineProperty(String.prototype, style, {\n\t    get: function() { return styles[style][0] + this + styles[style][1]; },\n\t    enumerable: false\n\t  });\n\t});\n\n\n/***/ },\n\n/***/ 16:\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;// TinyColor v1.4.1\n\t// https://github.com/bgrins/TinyColor\n\t// Brian Grinstead, MIT License\n\t\n\t(function(Math) {\n\t\n\tvar trimLeft = /^\\s+/,\n\t    trimRight = /\\s+$/,\n\t    tinyCounter = 0,\n\t    mathRound = Math.round,\n\t    mathMin = Math.min,\n\t    mathMax = Math.max,\n\t    mathRandom = Math.random;\n\t\n\tfunction tinycolor (color, opts) {\n\t\n\t    color = (color) ? color : '';\n\t    opts = opts || { };\n\t\n\t    // If input is already a tinycolor, return itself\n\t    if (color instanceof tinycolor) {\n\t       return color;\n\t    }\n\t    // If we are called as a function, call using new instead\n\t    if (!(this instanceof tinycolor)) {\n\t        return new tinycolor(color, opts);\n\t    }\n\t\n\t    var rgb = inputToRGB(color);\n\t    this._originalInput = color,\n\t    this._r = rgb.r,\n\t    this._g = rgb.g,\n\t    this._b = rgb.b,\n\t    this._a = rgb.a,\n\t    this._roundA = mathRound(100*this._a) / 100,\n\t    this._format = opts.format || rgb.format;\n\t    this._gradientType = opts.gradientType;\n\t\n\t    // Don't let the range of [0,255] come back in [0,1].\n\t    // Potentially lose a little bit of precision here, but will fix issues where\n\t    // .5 gets interpreted as half of the total, instead of half of 1\n\t    // If it was supposed to be 128, this was already taken care of by `inputToRgb`\n\t    if (this._r < 1) { this._r = mathRound(this._r); }\n\t    if (this._g < 1) { this._g = mathRound(this._g); }\n\t    if (this._b < 1) { this._b = mathRound(this._b); }\n\t\n\t    this._ok = rgb.ok;\n\t    this._tc_id = tinyCounter++;\n\t}\n\t\n\ttinycolor.prototype = {\n\t    isDark: function() {\n\t        return this.getBrightness() < 128;\n\t    },\n\t    isLight: function() {\n\t        return !this.isDark();\n\t    },\n\t    isValid: function() {\n\t        return this._ok;\n\t    },\n\t    getOriginalInput: function() {\n\t      return this._originalInput;\n\t    },\n\t    getFormat: function() {\n\t        return this._format;\n\t    },\n\t    getAlpha: function() {\n\t        return this._a;\n\t    },\n\t    getBrightness: function() {\n\t        //http://www.w3.org/TR/AERT#color-contrast\n\t        var rgb = this.toRgb();\n\t        return (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1000;\n\t    },\n\t    getLuminance: function() {\n\t        //http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef\n\t        var rgb = this.toRgb();\n\t        var RsRGB, GsRGB, BsRGB, R, G, B;\n\t        RsRGB = rgb.r/255;\n\t        GsRGB = rgb.g/255;\n\t        BsRGB = rgb.b/255;\n\t\n\t        if (RsRGB <= 0.03928) {R = RsRGB / 12.92;} else {R = Math.pow(((RsRGB + 0.055) / 1.055), 2.4);}\n\t        if (GsRGB <= 0.03928) {G = GsRGB / 12.92;} else {G = Math.pow(((GsRGB + 0.055) / 1.055), 2.4);}\n\t        if (BsRGB <= 0.03928) {B = BsRGB / 12.92;} else {B = Math.pow(((BsRGB + 0.055) / 1.055), 2.4);}\n\t        return (0.2126 * R) + (0.7152 * G) + (0.0722 * B);\n\t    },\n\t    setAlpha: function(value) {\n\t        this._a = boundAlpha(value);\n\t        this._roundA = mathRound(100*this._a) / 100;\n\t        return this;\n\t    },\n\t    toHsv: function() {\n\t        var hsv = rgbToHsv(this._r, this._g, this._b);\n\t        return { h: hsv.h * 360, s: hsv.s, v: hsv.v, a: this._a };\n\t    },\n\t    toHsvString: function() {\n\t        var hsv = rgbToHsv(this._r, this._g, this._b);\n\t        var h = mathRound(hsv.h * 360), s = mathRound(hsv.s * 100), v = mathRound(hsv.v * 100);\n\t        return (this._a == 1) ?\n\t          \"hsv(\"  + h + \", \" + s + \"%, \" + v + \"%)\" :\n\t          \"hsva(\" + h + \", \" + s + \"%, \" + v + \"%, \"+ this._roundA + \")\";\n\t    },\n\t    toHsl: function() {\n\t        var hsl = rgbToHsl(this._r, this._g, this._b);\n\t        return { h: hsl.h * 360, s: hsl.s, l: hsl.l, a: this._a };\n\t    },\n\t    toHslString: function() {\n\t        var hsl = rgbToHsl(this._r, this._g, this._b);\n\t        var h = mathRound(hsl.h * 360), s = mathRound(hsl.s * 100), l = mathRound(hsl.l * 100);\n\t        return (this._a == 1) ?\n\t          \"hsl(\"  + h + \", \" + s + \"%, \" + l + \"%)\" :\n\t          \"hsla(\" + h + \", \" + s + \"%, \" + l + \"%, \"+ this._roundA + \")\";\n\t    },\n\t    toHex: function(allow3Char) {\n\t        return rgbToHex(this._r, this._g, this._b, allow3Char);\n\t    },\n\t    toHexString: function(allow3Char) {\n\t        return '#' + this.toHex(allow3Char);\n\t    },\n\t    toHex8: function(allow4Char) {\n\t        return rgbaToHex(this._r, this._g, this._b, this._a, allow4Char);\n\t    },\n\t    toHex8String: function(allow4Char) {\n\t        return '#' + this.toHex8(allow4Char);\n\t    },\n\t    toRgb: function() {\n\t        return { r: mathRound(this._r), g: mathRound(this._g), b: mathRound(this._b), a: this._a };\n\t    },\n\t    toRgbString: function() {\n\t        return (this._a == 1) ?\n\t          \"rgb(\"  + mathRound(this._r) + \", \" + mathRound(this._g) + \", \" + mathRound(this._b) + \")\" :\n\t          \"rgba(\" + mathRound(this._r) + \", \" + mathRound(this._g) + \", \" + mathRound(this._b) + \", \" + this._roundA + \")\";\n\t    },\n\t    toPercentageRgb: function() {\n\t        return { r: mathRound(bound01(this._r, 255) * 100) + \"%\", g: mathRound(bound01(this._g, 255) * 100) + \"%\", b: mathRound(bound01(this._b, 255) * 100) + \"%\", a: this._a };\n\t    },\n\t    toPercentageRgbString: function() {\n\t        return (this._a == 1) ?\n\t          \"rgb(\"  + mathRound(bound01(this._r, 255) * 100) + \"%, \" + mathRound(bound01(this._g, 255) * 100) + \"%, \" + mathRound(bound01(this._b, 255) * 100) + \"%)\" :\n\t          \"rgba(\" + mathRound(bound01(this._r, 255) * 100) + \"%, \" + mathRound(bound01(this._g, 255) * 100) + \"%, \" + mathRound(bound01(this._b, 255) * 100) + \"%, \" + this._roundA + \")\";\n\t    },\n\t    toName: function() {\n\t        if (this._a === 0) {\n\t            return \"transparent\";\n\t        }\n\t\n\t        if (this._a < 1) {\n\t            return false;\n\t        }\n\t\n\t        return hexNames[rgbToHex(this._r, this._g, this._b, true)] || false;\n\t    },\n\t    toFilter: function(secondColor) {\n\t        var hex8String = '#' + rgbaToArgbHex(this._r, this._g, this._b, this._a);\n\t        var secondHex8String = hex8String;\n\t        var gradientType = this._gradientType ? \"GradientType = 1, \" : \"\";\n\t\n\t        if (secondColor) {\n\t            var s = tinycolor(secondColor);\n\t            secondHex8String = '#' + rgbaToArgbHex(s._r, s._g, s._b, s._a);\n\t        }\n\t\n\t        return \"progid:DXImageTransform.Microsoft.gradient(\"+gradientType+\"startColorstr=\"+hex8String+\",endColorstr=\"+secondHex8String+\")\";\n\t    },\n\t    toString: function(format) {\n\t        var formatSet = !!format;\n\t        format = format || this._format;\n\t\n\t        var formattedString = false;\n\t        var hasAlpha = this._a < 1 && this._a >= 0;\n\t        var needsAlphaFormat = !formatSet && hasAlpha && (format === \"hex\" || format === \"hex6\" || format === \"hex3\" || format === \"hex4\" || format === \"hex8\" || format === \"name\");\n\t\n\t        if (needsAlphaFormat) {\n\t            // Special case for \"transparent\", all other non-alpha formats\n\t            // will return rgba when there is transparency.\n\t            if (format === \"name\" && this._a === 0) {\n\t                return this.toName();\n\t            }\n\t            return this.toRgbString();\n\t        }\n\t        if (format === \"rgb\") {\n\t            formattedString = this.toRgbString();\n\t        }\n\t        if (format === \"prgb\") {\n\t            formattedString = this.toPercentageRgbString();\n\t        }\n\t        if (format === \"hex\" || format === \"hex6\") {\n\t            formattedString = this.toHexString();\n\t        }\n\t        if (format === \"hex3\") {\n\t            formattedString = this.toHexString(true);\n\t        }\n\t        if (format === \"hex4\") {\n\t            formattedString = this.toHex8String(true);\n\t        }\n\t        if (format === \"hex8\") {\n\t            formattedString = this.toHex8String();\n\t        }\n\t        if (format === \"name\") {\n\t            formattedString = this.toName();\n\t        }\n\t        if (format === \"hsl\") {\n\t            formattedString = this.toHslString();\n\t        }\n\t        if (format === \"hsv\") {\n\t            formattedString = this.toHsvString();\n\t        }\n\t\n\t        return formattedString || this.toHexString();\n\t    },\n\t    clone: function() {\n\t        return tinycolor(this.toString());\n\t    },\n\t\n\t    _applyModification: function(fn, args) {\n\t        var color = fn.apply(null, [this].concat([].slice.call(args)));\n\t        this._r = color._r;\n\t        this._g = color._g;\n\t        this._b = color._b;\n\t        this.setAlpha(color._a);\n\t        return this;\n\t    },\n\t    lighten: function() {\n\t        return this._applyModification(lighten, arguments);\n\t    },\n\t    brighten: function() {\n\t        return this._applyModification(brighten, arguments);\n\t    },\n\t    darken: function() {\n\t        return this._applyModification(darken, arguments);\n\t    },\n\t    desaturate: function() {\n\t        return this._applyModification(desaturate, arguments);\n\t    },\n\t    saturate: function() {\n\t        return this._applyModification(saturate, arguments);\n\t    },\n\t    greyscale: function() {\n\t        return this._applyModification(greyscale, arguments);\n\t    },\n\t    spin: function() {\n\t        return this._applyModification(spin, arguments);\n\t    },\n\t\n\t    _applyCombination: function(fn, args) {\n\t        return fn.apply(null, [this].concat([].slice.call(args)));\n\t    },\n\t    analogous: function() {\n\t        return this._applyCombination(analogous, arguments);\n\t    },\n\t    complement: function() {\n\t        return this._applyCombination(complement, arguments);\n\t    },\n\t    monochromatic: function() {\n\t        return this._applyCombination(monochromatic, arguments);\n\t    },\n\t    splitcomplement: function() {\n\t        return this._applyCombination(splitcomplement, arguments);\n\t    },\n\t    triad: function() {\n\t        return this._applyCombination(triad, arguments);\n\t    },\n\t    tetrad: function() {\n\t        return this._applyCombination(tetrad, arguments);\n\t    }\n\t};\n\t\n\t// If input is an object, force 1 into \"1.0\" to handle ratios properly\n\t// String input requires \"1.0\" as input, so 1 will be treated as 1\n\ttinycolor.fromRatio = function(color, opts) {\n\t    if (typeof color == \"object\") {\n\t        var newColor = {};\n\t        for (var i in color) {\n\t            if (color.hasOwnProperty(i)) {\n\t                if (i === \"a\") {\n\t                    newColor[i] = color[i];\n\t                }\n\t                else {\n\t                    newColor[i] = convertToPercentage(color[i]);\n\t                }\n\t            }\n\t        }\n\t        color = newColor;\n\t    }\n\t\n\t    return tinycolor(color, opts);\n\t};\n\t\n\t// Given a string or object, convert that input to RGB\n\t// Possible string inputs:\n\t//\n\t//     \"red\"\n\t//     \"#f00\" or \"f00\"\n\t//     \"#ff0000\" or \"ff0000\"\n\t//     \"#ff000000\" or \"ff000000\"\n\t//     \"rgb 255 0 0\" or \"rgb (255, 0, 0)\"\n\t//     \"rgb 1.0 0 0\" or \"rgb (1, 0, 0)\"\n\t//     \"rgba (255, 0, 0, 1)\" or \"rgba 255, 0, 0, 1\"\n\t//     \"rgba (1.0, 0, 0, 1)\" or \"rgba 1.0, 0, 0, 1\"\n\t//     \"hsl(0, 100%, 50%)\" or \"hsl 0 100% 50%\"\n\t//     \"hsla(0, 100%, 50%, 1)\" or \"hsla 0 100% 50%, 1\"\n\t//     \"hsv(0, 100%, 100%)\" or \"hsv 0 100% 100%\"\n\t//\n\tfunction inputToRGB(color) {\n\t\n\t    var rgb = { r: 0, g: 0, b: 0 };\n\t    var a = 1;\n\t    var s = null;\n\t    var v = null;\n\t    var l = null;\n\t    var ok = false;\n\t    var format = false;\n\t\n\t    if (typeof color == \"string\") {\n\t        color = stringInputToObject(color);\n\t    }\n\t\n\t    if (typeof color == \"object\") {\n\t        if (isValidCSSUnit(color.r) && isValidCSSUnit(color.g) && isValidCSSUnit(color.b)) {\n\t            rgb = rgbToRgb(color.r, color.g, color.b);\n\t            ok = true;\n\t            format = String(color.r).substr(-1) === \"%\" ? \"prgb\" : \"rgb\";\n\t        }\n\t        else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.v)) {\n\t            s = convertToPercentage(color.s);\n\t            v = convertToPercentage(color.v);\n\t            rgb = hsvToRgb(color.h, s, v);\n\t            ok = true;\n\t            format = \"hsv\";\n\t        }\n\t        else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.l)) {\n\t            s = convertToPercentage(color.s);\n\t            l = convertToPercentage(color.l);\n\t            rgb = hslToRgb(color.h, s, l);\n\t            ok = true;\n\t            format = \"hsl\";\n\t        }\n\t\n\t        if (color.hasOwnProperty(\"a\")) {\n\t            a = color.a;\n\t        }\n\t    }\n\t\n\t    a = boundAlpha(a);\n\t\n\t    return {\n\t        ok: ok,\n\t        format: color.format || format,\n\t        r: mathMin(255, mathMax(rgb.r, 0)),\n\t        g: mathMin(255, mathMax(rgb.g, 0)),\n\t        b: mathMin(255, mathMax(rgb.b, 0)),\n\t        a: a\n\t    };\n\t}\n\t\n\t\n\t// Conversion Functions\n\t// --------------------\n\t\n\t// `rgbToHsl`, `rgbToHsv`, `hslToRgb`, `hsvToRgb` modified from:\n\t// <http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript>\n\t\n\t// `rgbToRgb`\n\t// Handle bounds / percentage checking to conform to CSS color spec\n\t// <http://www.w3.org/TR/css3-color/>\n\t// *Assumes:* r, g, b in [0, 255] or [0, 1]\n\t// *Returns:* { r, g, b } in [0, 255]\n\tfunction rgbToRgb(r, g, b){\n\t    return {\n\t        r: bound01(r, 255) * 255,\n\t        g: bound01(g, 255) * 255,\n\t        b: bound01(b, 255) * 255\n\t    };\n\t}\n\t\n\t// `rgbToHsl`\n\t// Converts an RGB color value to HSL.\n\t// *Assumes:* r, g, and b are contained in [0, 255] or [0, 1]\n\t// *Returns:* { h, s, l } in [0,1]\n\tfunction rgbToHsl(r, g, b) {\n\t\n\t    r = bound01(r, 255);\n\t    g = bound01(g, 255);\n\t    b = bound01(b, 255);\n\t\n\t    var max = mathMax(r, g, b), min = mathMin(r, g, b);\n\t    var h, s, l = (max + min) / 2;\n\t\n\t    if(max == min) {\n\t        h = s = 0; // achromatic\n\t    }\n\t    else {\n\t        var d = max - min;\n\t        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n\t        switch(max) {\n\t            case r: h = (g - b) / d + (g < b ? 6 : 0); break;\n\t            case g: h = (b - r) / d + 2; break;\n\t            case b: h = (r - g) / d + 4; break;\n\t        }\n\t\n\t        h /= 6;\n\t    }\n\t\n\t    return { h: h, s: s, l: l };\n\t}\n\t\n\t// `hslToRgb`\n\t// Converts an HSL color value to RGB.\n\t// *Assumes:* h is contained in [0, 1] or [0, 360] and s and l are contained [0, 1] or [0, 100]\n\t// *Returns:* { r, g, b } in the set [0, 255]\n\tfunction hslToRgb(h, s, l) {\n\t    var r, g, b;\n\t\n\t    h = bound01(h, 360);\n\t    s = bound01(s, 100);\n\t    l = bound01(l, 100);\n\t\n\t    function hue2rgb(p, q, t) {\n\t        if(t < 0) t += 1;\n\t        if(t > 1) t -= 1;\n\t        if(t < 1/6) return p + (q - p) * 6 * t;\n\t        if(t < 1/2) return q;\n\t        if(t < 2/3) return p + (q - p) * (2/3 - t) * 6;\n\t        return p;\n\t    }\n\t\n\t    if(s === 0) {\n\t        r = g = b = l; // achromatic\n\t    }\n\t    else {\n\t        var q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n\t        var p = 2 * l - q;\n\t        r = hue2rgb(p, q, h + 1/3);\n\t        g = hue2rgb(p, q, h);\n\t        b = hue2rgb(p, q, h - 1/3);\n\t    }\n\t\n\t    return { r: r * 255, g: g * 255, b: b * 255 };\n\t}\n\t\n\t// `rgbToHsv`\n\t// Converts an RGB color value to HSV\n\t// *Assumes:* r, g, and b are contained in the set [0, 255] or [0, 1]\n\t// *Returns:* { h, s, v } in [0,1]\n\tfunction rgbToHsv(r, g, b) {\n\t\n\t    r = bound01(r, 255);\n\t    g = bound01(g, 255);\n\t    b = bound01(b, 255);\n\t\n\t    var max = mathMax(r, g, b), min = mathMin(r, g, b);\n\t    var h, s, v = max;\n\t\n\t    var d = max - min;\n\t    s = max === 0 ? 0 : d / max;\n\t\n\t    if(max == min) {\n\t        h = 0; // achromatic\n\t    }\n\t    else {\n\t        switch(max) {\n\t            case r: h = (g - b) / d + (g < b ? 6 : 0); break;\n\t            case g: h = (b - r) / d + 2; break;\n\t            case b: h = (r - g) / d + 4; break;\n\t        }\n\t        h /= 6;\n\t    }\n\t    return { h: h, s: s, v: v };\n\t}\n\t\n\t// `hsvToRgb`\n\t// Converts an HSV color value to RGB.\n\t// *Assumes:* h is contained in [0, 1] or [0, 360] and s and v are contained in [0, 1] or [0, 100]\n\t// *Returns:* { r, g, b } in the set [0, 255]\n\t function hsvToRgb(h, s, v) {\n\t\n\t    h = bound01(h, 360) * 6;\n\t    s = bound01(s, 100);\n\t    v = bound01(v, 100);\n\t\n\t    var i = Math.floor(h),\n\t        f = h - i,\n\t        p = v * (1 - s),\n\t        q = v * (1 - f * s),\n\t        t = v * (1 - (1 - f) * s),\n\t        mod = i % 6,\n\t        r = [v, q, p, p, t, v][mod],\n\t        g = [t, v, v, q, p, p][mod],\n\t        b = [p, p, t, v, v, q][mod];\n\t\n\t    return { r: r * 255, g: g * 255, b: b * 255 };\n\t}\n\t\n\t// `rgbToHex`\n\t// Converts an RGB color to hex\n\t// Assumes r, g, and b are contained in the set [0, 255]\n\t// Returns a 3 or 6 character hex\n\tfunction rgbToHex(r, g, b, allow3Char) {\n\t\n\t    var hex = [\n\t        pad2(mathRound(r).toString(16)),\n\t        pad2(mathRound(g).toString(16)),\n\t        pad2(mathRound(b).toString(16))\n\t    ];\n\t\n\t    // Return a 3 character hex if possible\n\t    if (allow3Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1)) {\n\t        return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0);\n\t    }\n\t\n\t    return hex.join(\"\");\n\t}\n\t\n\t// `rgbaToHex`\n\t// Converts an RGBA color plus alpha transparency to hex\n\t// Assumes r, g, b are contained in the set [0, 255] and\n\t// a in [0, 1]. Returns a 4 or 8 character rgba hex\n\tfunction rgbaToHex(r, g, b, a, allow4Char) {\n\t\n\t    var hex = [\n\t        pad2(mathRound(r).toString(16)),\n\t        pad2(mathRound(g).toString(16)),\n\t        pad2(mathRound(b).toString(16)),\n\t        pad2(convertDecimalToHex(a))\n\t    ];\n\t\n\t    // Return a 4 character hex if possible\n\t    if (allow4Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1) && hex[3].charAt(0) == hex[3].charAt(1)) {\n\t        return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0) + hex[3].charAt(0);\n\t    }\n\t\n\t    return hex.join(\"\");\n\t}\n\t\n\t// `rgbaToArgbHex`\n\t// Converts an RGBA color to an ARGB Hex8 string\n\t// Rarely used, but required for \"toFilter()\"\n\tfunction rgbaToArgbHex(r, g, b, a) {\n\t\n\t    var hex = [\n\t        pad2(convertDecimalToHex(a)),\n\t        pad2(mathRound(r).toString(16)),\n\t        pad2(mathRound(g).toString(16)),\n\t        pad2(mathRound(b).toString(16))\n\t    ];\n\t\n\t    return hex.join(\"\");\n\t}\n\t\n\t// `equals`\n\t// Can be called with any tinycolor input\n\ttinycolor.equals = function (color1, color2) {\n\t    if (!color1 || !color2) { return false; }\n\t    return tinycolor(color1).toRgbString() == tinycolor(color2).toRgbString();\n\t};\n\t\n\ttinycolor.random = function() {\n\t    return tinycolor.fromRatio({\n\t        r: mathRandom(),\n\t        g: mathRandom(),\n\t        b: mathRandom()\n\t    });\n\t};\n\t\n\t\n\t// Modification Functions\n\t// ----------------------\n\t// Thanks to less.js for some of the basics here\n\t// <https://github.com/cloudhead/less.js/blob/master/lib/less/functions.js>\n\t\n\tfunction desaturate(color, amount) {\n\t    amount = (amount === 0) ? 0 : (amount || 10);\n\t    var hsl = tinycolor(color).toHsl();\n\t    hsl.s -= amount / 100;\n\t    hsl.s = clamp01(hsl.s);\n\t    return tinycolor(hsl);\n\t}\n\t\n\tfunction saturate(color, amount) {\n\t    amount = (amount === 0) ? 0 : (amount || 10);\n\t    var hsl = tinycolor(color).toHsl();\n\t    hsl.s += amount / 100;\n\t    hsl.s = clamp01(hsl.s);\n\t    return tinycolor(hsl);\n\t}\n\t\n\tfunction greyscale(color) {\n\t    return tinycolor(color).desaturate(100);\n\t}\n\t\n\tfunction lighten (color, amount) {\n\t    amount = (amount === 0) ? 0 : (amount || 10);\n\t    var hsl = tinycolor(color).toHsl();\n\t    hsl.l += amount / 100;\n\t    hsl.l = clamp01(hsl.l);\n\t    return tinycolor(hsl);\n\t}\n\t\n\tfunction brighten(color, amount) {\n\t    amount = (amount === 0) ? 0 : (amount || 10);\n\t    var rgb = tinycolor(color).toRgb();\n\t    rgb.r = mathMax(0, mathMin(255, rgb.r - mathRound(255 * - (amount / 100))));\n\t    rgb.g = mathMax(0, mathMin(255, rgb.g - mathRound(255 * - (amount / 100))));\n\t    rgb.b = mathMax(0, mathMin(255, rgb.b - mathRound(255 * - (amount / 100))));\n\t    return tinycolor(rgb);\n\t}\n\t\n\tfunction darken (color, amount) {\n\t    amount = (amount === 0) ? 0 : (amount || 10);\n\t    var hsl = tinycolor(color).toHsl();\n\t    hsl.l -= amount / 100;\n\t    hsl.l = clamp01(hsl.l);\n\t    return tinycolor(hsl);\n\t}\n\t\n\t// Spin takes a positive or negative amount within [-360, 360] indicating the change of hue.\n\t// Values outside of this range will be wrapped into this range.\n\tfunction spin(color, amount) {\n\t    var hsl = tinycolor(color).toHsl();\n\t    var hue = (hsl.h + amount) % 360;\n\t    hsl.h = hue < 0 ? 360 + hue : hue;\n\t    return tinycolor(hsl);\n\t}\n\t\n\t// Combination Functions\n\t// ---------------------\n\t// Thanks to jQuery xColor for some of the ideas behind these\n\t// <https://github.com/infusion/jQuery-xcolor/blob/master/jquery.xcolor.js>\n\t\n\tfunction complement(color) {\n\t    var hsl = tinycolor(color).toHsl();\n\t    hsl.h = (hsl.h + 180) % 360;\n\t    return tinycolor(hsl);\n\t}\n\t\n\tfunction triad(color) {\n\t    var hsl = tinycolor(color).toHsl();\n\t    var h = hsl.h;\n\t    return [\n\t        tinycolor(color),\n\t        tinycolor({ h: (h + 120) % 360, s: hsl.s, l: hsl.l }),\n\t        tinycolor({ h: (h + 240) % 360, s: hsl.s, l: hsl.l })\n\t    ];\n\t}\n\t\n\tfunction tetrad(color) {\n\t    var hsl = tinycolor(color).toHsl();\n\t    var h = hsl.h;\n\t    return [\n\t        tinycolor(color),\n\t        tinycolor({ h: (h + 90) % 360, s: hsl.s, l: hsl.l }),\n\t        tinycolor({ h: (h + 180) % 360, s: hsl.s, l: hsl.l }),\n\t        tinycolor({ h: (h + 270) % 360, s: hsl.s, l: hsl.l })\n\t    ];\n\t}\n\t\n\tfunction splitcomplement(color) {\n\t    var hsl = tinycolor(color).toHsl();\n\t    var h = hsl.h;\n\t    return [\n\t        tinycolor(color),\n\t        tinycolor({ h: (h + 72) % 360, s: hsl.s, l: hsl.l}),\n\t        tinycolor({ h: (h + 216) % 360, s: hsl.s, l: hsl.l})\n\t    ];\n\t}\n\t\n\tfunction analogous(color, results, slices) {\n\t    results = results || 6;\n\t    slices = slices || 30;\n\t\n\t    var hsl = tinycolor(color).toHsl();\n\t    var part = 360 / slices;\n\t    var ret = [tinycolor(color)];\n\t\n\t    for (hsl.h = ((hsl.h - (part * results >> 1)) + 720) % 360; --results; ) {\n\t        hsl.h = (hsl.h + part) % 360;\n\t        ret.push(tinycolor(hsl));\n\t    }\n\t    return ret;\n\t}\n\t\n\tfunction monochromatic(color, results) {\n\t    results = results || 6;\n\t    var hsv = tinycolor(color).toHsv();\n\t    var h = hsv.h, s = hsv.s, v = hsv.v;\n\t    var ret = [];\n\t    var modification = 1 / results;\n\t\n\t    while (results--) {\n\t        ret.push(tinycolor({ h: h, s: s, v: v}));\n\t        v = (v + modification) % 1;\n\t    }\n\t\n\t    return ret;\n\t}\n\t\n\t// Utility Functions\n\t// ---------------------\n\t\n\ttinycolor.mix = function(color1, color2, amount) {\n\t    amount = (amount === 0) ? 0 : (amount || 50);\n\t\n\t    var rgb1 = tinycolor(color1).toRgb();\n\t    var rgb2 = tinycolor(color2).toRgb();\n\t\n\t    var p = amount / 100;\n\t\n\t    var rgba = {\n\t        r: ((rgb2.r - rgb1.r) * p) + rgb1.r,\n\t        g: ((rgb2.g - rgb1.g) * p) + rgb1.g,\n\t        b: ((rgb2.b - rgb1.b) * p) + rgb1.b,\n\t        a: ((rgb2.a - rgb1.a) * p) + rgb1.a\n\t    };\n\t\n\t    return tinycolor(rgba);\n\t};\n\t\n\t\n\t// Readability Functions\n\t// ---------------------\n\t// <http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef (WCAG Version 2)\n\t\n\t// `contrast`\n\t// Analyze the 2 colors and returns the color contrast defined by (WCAG Version 2)\n\ttinycolor.readability = function(color1, color2) {\n\t    var c1 = tinycolor(color1);\n\t    var c2 = tinycolor(color2);\n\t    return (Math.max(c1.getLuminance(),c2.getLuminance())+0.05) / (Math.min(c1.getLuminance(),c2.getLuminance())+0.05);\n\t};\n\t\n\t// `isReadable`\n\t// Ensure that foreground and background color combinations meet WCAG2 guidelines.\n\t// The third argument is an optional Object.\n\t//      the 'level' property states 'AA' or 'AAA' - if missing or invalid, it defaults to 'AA';\n\t//      the 'size' property states 'large' or 'small' - if missing or invalid, it defaults to 'small'.\n\t// If the entire object is absent, isReadable defaults to {level:\"AA\",size:\"small\"}.\n\t\n\t// *Example*\n\t//    tinycolor.isReadable(\"#000\", \"#111\") => false\n\t//    tinycolor.isReadable(\"#000\", \"#111\",{level:\"AA\",size:\"large\"}) => false\n\ttinycolor.isReadable = function(color1, color2, wcag2) {\n\t    var readability = tinycolor.readability(color1, color2);\n\t    var wcag2Parms, out;\n\t\n\t    out = false;\n\t\n\t    wcag2Parms = validateWCAG2Parms(wcag2);\n\t    switch (wcag2Parms.level + wcag2Parms.size) {\n\t        case \"AAsmall\":\n\t        case \"AAAlarge\":\n\t            out = readability >= 4.5;\n\t            break;\n\t        case \"AAlarge\":\n\t            out = readability >= 3;\n\t            break;\n\t        case \"AAAsmall\":\n\t            out = readability >= 7;\n\t            break;\n\t    }\n\t    return out;\n\t\n\t};\n\t\n\t// `mostReadable`\n\t// Given a base color and a list of possible foreground or background\n\t// colors for that base, returns the most readable color.\n\t// Optionally returns Black or White if the most readable color is unreadable.\n\t// *Example*\n\t//    tinycolor.mostReadable(tinycolor.mostReadable(\"#123\", [\"#124\", \"#125\"],{includeFallbackColors:false}).toHexString(); // \"#112255\"\n\t//    tinycolor.mostReadable(tinycolor.mostReadable(\"#123\", [\"#124\", \"#125\"],{includeFallbackColors:true}).toHexString();  // \"#ffffff\"\n\t//    tinycolor.mostReadable(\"#a8015a\", [\"#faf3f3\"],{includeFallbackColors:true,level:\"AAA\",size:\"large\"}).toHexString(); // \"#faf3f3\"\n\t//    tinycolor.mostReadable(\"#a8015a\", [\"#faf3f3\"],{includeFallbackColors:true,level:\"AAA\",size:\"small\"}).toHexString(); // \"#ffffff\"\n\ttinycolor.mostReadable = function(baseColor, colorList, args) {\n\t    var bestColor = null;\n\t    var bestScore = 0;\n\t    var readability;\n\t    var includeFallbackColors, level, size ;\n\t    args = args || {};\n\t    includeFallbackColors = args.includeFallbackColors ;\n\t    level = args.level;\n\t    size = args.size;\n\t\n\t    for (var i= 0; i < colorList.length ; i++) {\n\t        readability = tinycolor.readability(baseColor, colorList[i]);\n\t        if (readability > bestScore) {\n\t            bestScore = readability;\n\t            bestColor = tinycolor(colorList[i]);\n\t        }\n\t    }\n\t\n\t    if (tinycolor.isReadable(baseColor, bestColor, {\"level\":level,\"size\":size}) || !includeFallbackColors) {\n\t        return bestColor;\n\t    }\n\t    else {\n\t        args.includeFallbackColors=false;\n\t        return tinycolor.mostReadable(baseColor,[\"#fff\", \"#000\"],args);\n\t    }\n\t};\n\t\n\t\n\t// Big List of Colors\n\t// ------------------\n\t// <http://www.w3.org/TR/css3-color/#svg-color>\n\tvar names = tinycolor.names = {\n\t    aliceblue: \"f0f8ff\",\n\t    antiquewhite: \"faebd7\",\n\t    aqua: \"0ff\",\n\t    aquamarine: \"7fffd4\",\n\t    azure: \"f0ffff\",\n\t    beige: \"f5f5dc\",\n\t    bisque: \"ffe4c4\",\n\t    black: \"000\",\n\t    blanchedalmond: \"ffebcd\",\n\t    blue: \"00f\",\n\t    blueviolet: \"8a2be2\",\n\t    brown: \"a52a2a\",\n\t    burlywood: \"deb887\",\n\t    burntsienna: \"ea7e5d\",\n\t    cadetblue: \"5f9ea0\",\n\t    chartreuse: \"7fff00\",\n\t    chocolate: \"d2691e\",\n\t    coral: \"ff7f50\",\n\t    cornflowerblue: \"6495ed\",\n\t    cornsilk: \"fff8dc\",\n\t    crimson: \"dc143c\",\n\t    cyan: \"0ff\",\n\t    darkblue: \"00008b\",\n\t    darkcyan: \"008b8b\",\n\t    darkgoldenrod: \"b8860b\",\n\t    darkgray: \"a9a9a9\",\n\t    darkgreen: \"006400\",\n\t    darkgrey: \"a9a9a9\",\n\t    darkkhaki: \"bdb76b\",\n\t    darkmagenta: \"8b008b\",\n\t    darkolivegreen: \"556b2f\",\n\t    darkorange: \"ff8c00\",\n\t    darkorchid: \"9932cc\",\n\t    darkred: \"8b0000\",\n\t    darksalmon: \"e9967a\",\n\t    darkseagreen: \"8fbc8f\",\n\t    darkslateblue: \"483d8b\",\n\t    darkslategray: \"2f4f4f\",\n\t    darkslategrey: \"2f4f4f\",\n\t    darkturquoise: \"00ced1\",\n\t    darkviolet: \"9400d3\",\n\t    deeppink: \"ff1493\",\n\t    deepskyblue: \"00bfff\",\n\t    dimgray: \"696969\",\n\t    dimgrey: \"696969\",\n\t    dodgerblue: \"1e90ff\",\n\t    firebrick: \"b22222\",\n\t    floralwhite: \"fffaf0\",\n\t    forestgreen: \"228b22\",\n\t    fuchsia: \"f0f\",\n\t    gainsboro: \"dcdcdc\",\n\t    ghostwhite: \"f8f8ff\",\n\t    gold: \"ffd700\",\n\t    goldenrod: \"daa520\",\n\t    gray: \"808080\",\n\t    green: \"008000\",\n\t    greenyellow: \"adff2f\",\n\t    grey: \"808080\",\n\t    honeydew: \"f0fff0\",\n\t    hotpink: \"ff69b4\",\n\t    indianred: \"cd5c5c\",\n\t    indigo: \"4b0082\",\n\t    ivory: \"fffff0\",\n\t    khaki: \"f0e68c\",\n\t    lavender: \"e6e6fa\",\n\t    lavenderblush: \"fff0f5\",\n\t    lawngreen: \"7cfc00\",\n\t    lemonchiffon: \"fffacd\",\n\t    lightblue: \"add8e6\",\n\t    lightcoral: \"f08080\",\n\t    lightcyan: \"e0ffff\",\n\t    lightgoldenrodyellow: \"fafad2\",\n\t    lightgray: \"d3d3d3\",\n\t    lightgreen: \"90ee90\",\n\t    lightgrey: \"d3d3d3\",\n\t    lightpink: \"ffb6c1\",\n\t    lightsalmon: \"ffa07a\",\n\t    lightseagreen: \"20b2aa\",\n\t    lightskyblue: \"87cefa\",\n\t    lightslategray: \"789\",\n\t    lightslategrey: \"789\",\n\t    lightsteelblue: \"b0c4de\",\n\t    lightyellow: \"ffffe0\",\n\t    lime: \"0f0\",\n\t    limegreen: \"32cd32\",\n\t    linen: \"faf0e6\",\n\t    magenta: \"f0f\",\n\t    maroon: \"800000\",\n\t    mediumaquamarine: \"66cdaa\",\n\t    mediumblue: \"0000cd\",\n\t    mediumorchid: \"ba55d3\",\n\t    mediumpurple: \"9370db\",\n\t    mediumseagreen: \"3cb371\",\n\t    mediumslateblue: \"7b68ee\",\n\t    mediumspringgreen: \"00fa9a\",\n\t    mediumturquoise: \"48d1cc\",\n\t    mediumvioletred: \"c71585\",\n\t    midnightblue: \"191970\",\n\t    mintcream: \"f5fffa\",\n\t    mistyrose: \"ffe4e1\",\n\t    moccasin: \"ffe4b5\",\n\t    navajowhite: \"ffdead\",\n\t    navy: \"000080\",\n\t    oldlace: \"fdf5e6\",\n\t    olive: \"808000\",\n\t    olivedrab: \"6b8e23\",\n\t    orange: \"ffa500\",\n\t    orangered: \"ff4500\",\n\t    orchid: \"da70d6\",\n\t    palegoldenrod: \"eee8aa\",\n\t    palegreen: \"98fb98\",\n\t    paleturquoise: \"afeeee\",\n\t    palevioletred: \"db7093\",\n\t    papayawhip: \"ffefd5\",\n\t    peachpuff: \"ffdab9\",\n\t    peru: \"cd853f\",\n\t    pink: \"ffc0cb\",\n\t    plum: \"dda0dd\",\n\t    powderblue: \"b0e0e6\",\n\t    purple: \"800080\",\n\t    rebeccapurple: \"663399\",\n\t    red: \"f00\",\n\t    rosybrown: \"bc8f8f\",\n\t    royalblue: \"4169e1\",\n\t    saddlebrown: \"8b4513\",\n\t    salmon: \"fa8072\",\n\t    sandybrown: \"f4a460\",\n\t    seagreen: \"2e8b57\",\n\t    seashell: \"fff5ee\",\n\t    sienna: \"a0522d\",\n\t    silver: \"c0c0c0\",\n\t    skyblue: \"87ceeb\",\n\t    slateblue: \"6a5acd\",\n\t    slategray: \"708090\",\n\t    slategrey: \"708090\",\n\t    snow: \"fffafa\",\n\t    springgreen: \"00ff7f\",\n\t    steelblue: \"4682b4\",\n\t    tan: \"d2b48c\",\n\t    teal: \"008080\",\n\t    thistle: \"d8bfd8\",\n\t    tomato: \"ff6347\",\n\t    turquoise: \"40e0d0\",\n\t    violet: \"ee82ee\",\n\t    wheat: \"f5deb3\",\n\t    white: \"fff\",\n\t    whitesmoke: \"f5f5f5\",\n\t    yellow: \"ff0\",\n\t    yellowgreen: \"9acd32\"\n\t};\n\t\n\t// Make it easy to access colors via `hexNames[hex]`\n\tvar hexNames = tinycolor.hexNames = flip(names);\n\t\n\t\n\t// Utilities\n\t// ---------\n\t\n\t// `{ 'name1': 'val1' }` becomes `{ 'val1': 'name1' }`\n\tfunction flip(o) {\n\t    var flipped = { };\n\t    for (var i in o) {\n\t        if (o.hasOwnProperty(i)) {\n\t            flipped[o[i]] = i;\n\t        }\n\t    }\n\t    return flipped;\n\t}\n\t\n\t// Return a valid alpha value [0,1] with all invalid values being set to 1\n\tfunction boundAlpha(a) {\n\t    a = parseFloat(a);\n\t\n\t    if (isNaN(a) || a < 0 || a > 1) {\n\t        a = 1;\n\t    }\n\t\n\t    return a;\n\t}\n\t\n\t// Take input from [0, n] and return it as [0, 1]\n\tfunction bound01(n, max) {\n\t    if (isOnePointZero(n)) { n = \"100%\"; }\n\t\n\t    var processPercent = isPercentage(n);\n\t    n = mathMin(max, mathMax(0, parseFloat(n)));\n\t\n\t    // Automatically convert percentage into number\n\t    if (processPercent) {\n\t        n = parseInt(n * max, 10) / 100;\n\t    }\n\t\n\t    // Handle floating point rounding errors\n\t    if ((Math.abs(n - max) < 0.000001)) {\n\t        return 1;\n\t    }\n\t\n\t    // Convert into [0, 1] range if it isn't already\n\t    return (n % max) / parseFloat(max);\n\t}\n\t\n\t// Force a number between 0 and 1\n\tfunction clamp01(val) {\n\t    return mathMin(1, mathMax(0, val));\n\t}\n\t\n\t// Parse a base-16 hex value into a base-10 integer\n\tfunction parseIntFromHex(val) {\n\t    return parseInt(val, 16);\n\t}\n\t\n\t// Need to handle 1.0 as 100%, since once it is a number, there is no difference between it and 1\n\t// <http://stackoverflow.com/questions/7422072/javascript-how-to-detect-number-as-a-decimal-including-1-0>\n\tfunction isOnePointZero(n) {\n\t    return typeof n == \"string\" && n.indexOf('.') != -1 && parseFloat(n) === 1;\n\t}\n\t\n\t// Check to see if string passed in is a percentage\n\tfunction isPercentage(n) {\n\t    return typeof n === \"string\" && n.indexOf('%') != -1;\n\t}\n\t\n\t// Force a hex value to have 2 characters\n\tfunction pad2(c) {\n\t    return c.length == 1 ? '0' + c : '' + c;\n\t}\n\t\n\t// Replace a decimal with it's percentage value\n\tfunction convertToPercentage(n) {\n\t    if (n <= 1) {\n\t        n = (n * 100) + \"%\";\n\t    }\n\t\n\t    return n;\n\t}\n\t\n\t// Converts a decimal to a hex value\n\tfunction convertDecimalToHex(d) {\n\t    return Math.round(parseFloat(d) * 255).toString(16);\n\t}\n\t// Converts a hex value to a decimal\n\tfunction convertHexToDecimal(h) {\n\t    return (parseIntFromHex(h) / 255);\n\t}\n\t\n\tvar matchers = (function() {\n\t\n\t    // <http://www.w3.org/TR/css3-values/#integers>\n\t    var CSS_INTEGER = \"[-\\\\+]?\\\\d+%?\";\n\t\n\t    // <http://www.w3.org/TR/css3-values/#number-value>\n\t    var CSS_NUMBER = \"[-\\\\+]?\\\\d*\\\\.\\\\d+%?\";\n\t\n\t    // Allow positive/negative integer/number.  Don't capture the either/or, just the entire outcome.\n\t    var CSS_UNIT = \"(?:\" + CSS_NUMBER + \")|(?:\" + CSS_INTEGER + \")\";\n\t\n\t    // Actual matching.\n\t    // Parentheses and commas are optional, but not required.\n\t    // Whitespace can take the place of commas or opening paren\n\t    var PERMISSIVE_MATCH3 = \"[\\\\s|\\\\(]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")\\\\s*\\\\)?\";\n\t    var PERMISSIVE_MATCH4 = \"[\\\\s|\\\\(]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")\\\\s*\\\\)?\";\n\t\n\t    return {\n\t        CSS_UNIT: new RegExp(CSS_UNIT),\n\t        rgb: new RegExp(\"rgb\" + PERMISSIVE_MATCH3),\n\t        rgba: new RegExp(\"rgba\" + PERMISSIVE_MATCH4),\n\t        hsl: new RegExp(\"hsl\" + PERMISSIVE_MATCH3),\n\t        hsla: new RegExp(\"hsla\" + PERMISSIVE_MATCH4),\n\t        hsv: new RegExp(\"hsv\" + PERMISSIVE_MATCH3),\n\t        hsva: new RegExp(\"hsva\" + PERMISSIVE_MATCH4),\n\t        hex3: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\n\t        hex6: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,\n\t        hex4: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\n\t        hex8: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/\n\t    };\n\t})();\n\t\n\t// `isValidCSSUnit`\n\t// Take in a single string / number and check to see if it looks like a CSS unit\n\t// (see `matchers` above for definition).\n\tfunction isValidCSSUnit(color) {\n\t    return !!matchers.CSS_UNIT.exec(color);\n\t}\n\t\n\t// `stringInputToObject`\n\t// Permissive string parsing.  Take in a number of formats, and output an object\n\t// based on detected format.  Returns `{ r, g, b }` or `{ h, s, l }` or `{ h, s, v}`\n\tfunction stringInputToObject(color) {\n\t\n\t    color = color.replace(trimLeft,'').replace(trimRight, '').toLowerCase();\n\t    var named = false;\n\t    if (names[color]) {\n\t        color = names[color];\n\t        named = true;\n\t    }\n\t    else if (color == 'transparent') {\n\t        return { r: 0, g: 0, b: 0, a: 0, format: \"name\" };\n\t    }\n\t\n\t    // Try to match string input using regular expressions.\n\t    // Keep most of the number bounding out of this function - don't worry about [0,1] or [0,100] or [0,360]\n\t    // Just return an object and let the conversion functions handle that.\n\t    // This way the result will be the same whether the tinycolor is initialized with string or object.\n\t    var match;\n\t    if ((match = matchers.rgb.exec(color))) {\n\t        return { r: match[1], g: match[2], b: match[3] };\n\t    }\n\t    if ((match = matchers.rgba.exec(color))) {\n\t        return { r: match[1], g: match[2], b: match[3], a: match[4] };\n\t    }\n\t    if ((match = matchers.hsl.exec(color))) {\n\t        return { h: match[1], s: match[2], l: match[3] };\n\t    }\n\t    if ((match = matchers.hsla.exec(color))) {\n\t        return { h: match[1], s: match[2], l: match[3], a: match[4] };\n\t    }\n\t    if ((match = matchers.hsv.exec(color))) {\n\t        return { h: match[1], s: match[2], v: match[3] };\n\t    }\n\t    if ((match = matchers.hsva.exec(color))) {\n\t        return { h: match[1], s: match[2], v: match[3], a: match[4] };\n\t    }\n\t    if ((match = matchers.hex8.exec(color))) {\n\t        return {\n\t            r: parseIntFromHex(match[1]),\n\t            g: parseIntFromHex(match[2]),\n\t            b: parseIntFromHex(match[3]),\n\t            a: convertHexToDecimal(match[4]),\n\t            format: named ? \"name\" : \"hex8\"\n\t        };\n\t    }\n\t    if ((match = matchers.hex6.exec(color))) {\n\t        return {\n\t            r: parseIntFromHex(match[1]),\n\t            g: parseIntFromHex(match[2]),\n\t            b: parseIntFromHex(match[3]),\n\t            format: named ? \"name\" : \"hex\"\n\t        };\n\t    }\n\t    if ((match = matchers.hex4.exec(color))) {\n\t        return {\n\t            r: parseIntFromHex(match[1] + '' + match[1]),\n\t            g: parseIntFromHex(match[2] + '' + match[2]),\n\t            b: parseIntFromHex(match[3] + '' + match[3]),\n\t            a: convertHexToDecimal(match[4] + '' + match[4]),\n\t            format: named ? \"name\" : \"hex8\"\n\t        };\n\t    }\n\t    if ((match = matchers.hex3.exec(color))) {\n\t        return {\n\t            r: parseIntFromHex(match[1] + '' + match[1]),\n\t            g: parseIntFromHex(match[2] + '' + match[2]),\n\t            b: parseIntFromHex(match[3] + '' + match[3]),\n\t            format: named ? \"name\" : \"hex\"\n\t        };\n\t    }\n\t\n\t    return false;\n\t}\n\t\n\tfunction validateWCAG2Parms(parms) {\n\t    // return valid WCAG2 parms for isReadable.\n\t    // If input parms are invalid, return {\"level\":\"AA\", \"size\":\"small\"}\n\t    var level, size;\n\t    parms = parms || {\"level\":\"AA\", \"size\":\"small\"};\n\t    level = (parms.level || \"AA\").toUpperCase();\n\t    size = (parms.size || \"small\").toLowerCase();\n\t    if (level !== \"AA\" && level !== \"AAA\") {\n\t        level = \"AA\";\n\t    }\n\t    if (size !== \"small\" && size !== \"large\") {\n\t        size = \"small\";\n\t    }\n\t    return {\"level\":level, \"size\":size};\n\t}\n\t\n\t// Node: Export function\n\tif (typeof module !== \"undefined\" && module.exports) {\n\t    module.exports = tinycolor;\n\t}\n\t// AMD/requirejs: Define the module\n\telse if (true) {\n\t    !(__WEBPACK_AMD_DEFINE_RESULT__ = function () {return tinycolor;}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t}\n\t// Browser: Expose to window\n\telse {\n\t    window.tinycolor = tinycolor;\n\t}\n\t\n\t})(Math);\n\n\n/***/ },\n\n/***/ 17:\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!\n\t * TinyGradient 0.3.1\n\t * Copyright 2014-2015 Damien \"Mistic\" Sorel (http://www.strangeplanet.fr)\n\t * Licensed under MIT (http://opensource.org/licenses/MIT)\n\t */\n\t\n\t(function(root, factory) {\n\t    if (typeof module !== \"undefined\" && module.exports) {\n\t        module.exports = factory(__webpack_require__(16));\n\t    }\n\t    else if (true) {\n\t        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(15)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t    }\n\t    else {\n\t        root.tinygradient = factory(root.tinycolor);\n\t    }\n\t}(this, function(tinycolor) {\n\t    \"use strict\";\n\t\n\t    var Utils = {\n\t        rgba_max: { r: 256, g: 256, b: 256, a: 1 },\n\t        hsva_max: { h: 360, s: 1, v: 1, a: 1 },\n\t\n\t        /**\n\t         * Linearly compute the step size between start and end (not normalized)\n\t         * @param {Object} start - rgba or hsva\n\t         * @param {Object} end - rgba or hsva\n\t         * @param {Integer} steps - number of desired steps\n\t         * @return {Object} rgba or hsva\n\t         */\n\t        stepize: function(start, end, steps) {\n\t            var step = {};\n\t\n\t            for (var k in start) {\n\t                if (start.hasOwnProperty(k)) {\n\t                    step[k] = (end[k]-start[k]) / steps;\n\t                }\n\t            }\n\t\n\t            return step;\n\t        },\n\t\n\t        /**\n\t         * Compute the final step color\n\t         * @param {Object} step - rgba or hsva from `stepize`\n\t         * @param {Object} start - rgba or hsva\n\t         * @param {Integer} i - color index\n\t         * @param {Object} max - rgba or hsva of maximum values for each channel\n\t         * @return {Object} rgba or hsva\n\t         */\n\t        interpolate: function(step, start, i, max) {\n\t            var color = {};\n\t\n\t            for (var k in start) {\n\t                if (start.hasOwnProperty(k)) {\n\t                    color[k] = step[k] * i + start[k];\n\t                    color[k] = color[k]<0 ? color[k]+max[k] : ( max[k]!=1 ? color[k]%max[k] : color[k] );\n\t                }\n\t            }\n\t\n\t            return color;\n\t        },\n\t\n\t        /**\n\t         * Generate gradient with RGBa interpolation\n\t         * @param {Object} stop1\n\t         * @param {Object} stop2\n\t         * @param {Integer} steps\n\t         * @param {tinycolor[]} color1 included, color2 excluded\n\t         */\n\t        rgb: function(stop1, stop2, steps) {\n\t            var start = stop1.color.toRgb(),\n\t                end = stop2.color.toRgb(),\n\t                gradient = [stop1.color],\n\t                step = Utils.stepize(start, end, steps),\n\t                color;\n\t\n\t            for (var i=1; i<steps; i++) {\n\t                color = Utils.interpolate(step, start, i, Utils.rgba_max);\n\t                gradient.push(tinycolor(color));\n\t            }\n\t\n\t            return gradient;\n\t        },\n\t\n\t        /**\n\t         * Generate gradient with HSVa interpolation\n\t         * @param {Object} stop1\n\t         * @param {Object} stop2\n\t         * @param {Integer} steps\n\t         * @param {Boolean} trigonometric - true to step in trigonometric order\n\t         * @param {tinycolor[]} color1 included, color2 excluded\n\t         */\n\t        hsv: function(stop1, stop2, steps, trigonometric) {\n\t            var start = stop1.color.toHsv(),\n\t                end = stop2.color.toHsv(),\n\t                gradient = [stop1.color],\n\t                step = Utils.stepize(start, end, steps),\n\t                diff, color;\n\t\n\t            // recompute hue\n\t            if ((start.h <= end.h && !trigonometric) || (start.h >= end.h && trigonometric)) {\n\t                diff = end.h-start.h;\n\t            }\n\t            else if (trigonometric) {\n\t                diff = 360-end.h+start.h;\n\t            }\n\t            else {\n\t                diff = 360-start.h+end.h;\n\t            }\n\t            step.h = Math.pow(-1, trigonometric) * Math.abs(diff)*1.0 / steps;\n\t\n\t            for (var i=1; i<steps; i++) {\n\t                color = Utils.interpolate(step, start, i, Utils.hsva_max);\n\t                gradient.push(tinycolor(color));\n\t            }\n\t\n\t            return gradient;\n\t        },\n\t\n\t        /**\n\t         * Compute substeps between each stops\n\t         * @param {Object[]} stops\n\t         * @param {Integer} steps\n\t         * @return {Integer[]}\n\t         */\n\t        substeps: function(stops, steps) {\n\t            var l = stops.length;\n\t\n\t            // validation\n\t            steps = parseInt(steps);\n\t\n\t            if (isNaN(steps) || steps < 2) {\n\t                throw new Error('Invalid number of steps (< 2)');\n\t            }\n\t            if (steps < l) {\n\t                throw new Error('Number of steps cannot be inferior to number of stops');\n\t            }\n\t\n\t            // compute substeps from stop positions\n\t            var substeps = [];\n\t\n\t            for (var i=1; i<l; i++) {\n\t                var step = (steps-1) * (stops[i].pos-stops[i-1].pos);\n\t                substeps.push(Math.max(1, Math.round(step)));\n\t            }\n\t\n\t            // adjust number of steps\n\t            var totalSubsteps = 1;\n\t            for (var n=l-1; n--;) totalSubsteps+= substeps[n];\n\t\n\t            while (totalSubsteps != steps) {\n\t                if (totalSubsteps < steps) {\n\t                    var min = Math.min.apply(null, substeps);\n\t                    substeps[substeps.indexOf(min)]++;\n\t                    totalSubsteps++;\n\t                }\n\t                else {\n\t                    var max = Math.max.apply(null, substeps);\n\t                    substeps[substeps.indexOf(max)]--;\n\t                    totalSubsteps--;\n\t                }\n\t            }\n\t\n\t            return substeps;\n\t        }\n\t    };\n\t\n\t    /**\n\t     * @class tinygradient\n\t     * @param {mixed} stops\n\t     */\n\t    var TinyGradient = function(stops) {\n\t        // varargs\n\t        if (arguments.length == 1) {\n\t            if (!(arguments[0] instanceof Array)) {\n\t                throw new Error('\"stops\" is not an array');\n\t            }\n\t            stops = arguments[0];\n\t        }\n\t        else {\n\t            stops = Array.prototype.slice.call(arguments);\n\t        }\n\t\n\t        // if we are called as a function, call using new instead\n\t        if (!(this instanceof TinyGradient)) {\n\t            return new TinyGradient(stops);\n\t        }\n\t\n\t        // validation\n\t        if (stops.length < 2) {\n\t            throw new Error('Invalid number of stops (< 2)');\n\t        }\n\t\n\t        var havingPositions = stops[0].pos !== undefined,\n\t            l = stops.length,\n\t            p = -1;\n\t        // create tinycolor objects and clean positions\n\t        this.stops = stops.map(function(stop, i) {\n\t            var hasPosition = stop.pos !== undefined;\n\t            if (havingPositions ^ hasPosition) {\n\t                throw new Error('Cannot mix positionned and not posionned color stops');\n\t            }\n\t\n\t            if (hasPosition) {\n\t                stop = {\n\t                    color: tinycolor(stop.color),\n\t                    pos: stop.pos\n\t                };\n\t\n\t                if (stop.pos < 0 || stop.pos > 1) {\n\t                    throw new Error('Color stops positions must be between 0 and 1');\n\t                }\n\t                else if (stop.pos <= p) {\n\t                    throw new Error('Color stops positions are not ordered');\n\t                }\n\t                p = stop.pos;\n\t            }\n\t            else {\n\t                stop = {\n\t                    color: tinycolor(stop),\n\t                    pos: i/(l-1)\n\t                };\n\t            }\n\t\n\t            return stop;\n\t        });\n\t\n\t        if (this.stops[0].pos !== 0) {\n\t            this.stops.unshift({\n\t                color: this.stops[0].color,\n\t                pos: 0\n\t            });\n\t        }\n\t        if (this.stops[this.stops.length-1].pos !== 1) {\n\t            this.stops.push({\n\t                color: this.stops[this.stops.length-1].color,\n\t                pos: 1\n\t            });\n\t        }\n\t    };\n\t\n\t    /**\n\t     * Return new instance with reversed stops\n\t     * @return {tinygradient}\n\t     */\n\t    TinyGradient.prototype.reverse = function() {\n\t        var stops = [];\n\t\n\t        this.stops.forEach(function(stop) {\n\t            stops.push({\n\t                color: stop.color,\n\t                pos: 1 - stop.pos\n\t            });\n\t        });\n\t\n\t        return new TinyGradient(stops.reverse());\n\t    };\n\t\n\t    /**\n\t     * Generate gradient with RGBa interpolation\n\t     * @param {Integer} steps\n\t     * @return {tinycolor[]}\n\t     */\n\t    TinyGradient.prototype.rgb = function(steps) {\n\t        var substeps = Utils.substeps(this.stops, steps),\n\t            gradient = [];\n\t\n\t        for (var i=0, l=this.stops.length; i<l-1; i++) {\n\t            gradient = gradient.concat(Utils.rgb(this.stops[i], this.stops[i+1], substeps[i]));\n\t        }\n\t\n\t        gradient.push(this.stops[l-1].color);\n\t\n\t        return gradient;\n\t    };\n\t\n\t    /**\n\t     * Generate gradient with HSVa interpolation\n\t     * @param {Integer} steps\n\t     * @param {Boolean|String} [mode=false]\n\t     *    - false to step in clockwise\n\t     *    - true to step in trigonometric order\n\t     *    - 'short' to use the shortest way\n\t     *    - 'long' to use the longest way\n\t     * @return {tinycolor[]}\n\t     */\n\t    TinyGradient.prototype.hsv = function(steps, mode) {\n\t        var substeps = Utils.substeps(this.stops, steps),\n\t            trigonometric = mode === true,\n\t            parametrized = typeof mode === 'string',\n\t            gradient = [],\n\t            start, end, trig;\n\t\n\t        for (var i=0, l=this.stops.length; i<l-1; i++) {\n\t            start = this.stops[i].color.toHsv();\n\t            end = this.stops[i+1].color.toHsv();\n\t                \n\t            if (parametrized) {\n\t                trig = (start.h < end.h && end.h-start.h < 180) || (start.h > end.h && start.h-end.h > 180);\n\t            }\n\t            \n\t            // rgb interpolation if one of the steps in grayscale\n\t            if (start.s===0 || end.s===0) {\n\t                gradient = gradient.concat(Utils.rgb(this.stops[i], this.stops[i+1], substeps[i]));\n\t            }\n\t            else {\n\t                gradient = gradient.concat(Utils.hsv(this.stops[i], this.stops[i+1], substeps[i],\n\t                  (mode==='long' && trig) || (mode==='short' && !trig) || (!parametrized && trigonometric)\n\t                ));\n\t            }\n\t        }\n\t\n\t        gradient.push(this.stops[l-1].color);\n\t\n\t        return gradient;\n\t    };\n\t\n\t    /**\n\t     * Generate CSS3 command (no prefix) for this gradient\n\t     * @param {String} [mode=linear] - 'linear' or 'radial'\n\t     * @param {String} [direction] - default is 'to right' or 'ellipse at center'\n\t     * @return {String}\n\t     */\n\t    TinyGradient.prototype.css = function(mode, direction) {\n\t        mode = mode || 'linear';\n\t        direction = direction || (mode=='linear' ? 'to right' : 'ellipse at center');\n\t\n\t        var css = mode + '-gradient(' + direction;\n\t        this.stops.forEach(function(stop) {\n\t            css+= ', ' + stop.color.toRgbString() + ' ' + (stop.pos*100) + '%';\n\t        });\n\t        css+= ')';\n\t        return css;\n\t    };\n\t\n\t\n\t    /**\n\t     * Initialize and create gradient with RGBa interpolation\n\t     * @see TinyGradient::rgb\n\t     */\n\t    TinyGradient.rgb = function(colors, steps) {\n\t        colors = Array.prototype.slice.call(arguments);\n\t        steps = colors.pop();\n\t\n\t        return TinyGradient.apply(null, colors).rgb(steps);\n\t    };\n\t\n\t    /**\n\t     * Initialize and create gradient with HSVa interpolation\n\t     * @see TinyGradient::hsv\n\t     */\n\t    TinyGradient.hsv = function(colors, steps, mode) {\n\t        colors = Array.prototype.slice.call(arguments);\n\t        mode = colors.pop();\n\t        steps = colors.pop();\n\t\n\t        return TinyGradient.apply(null, colors).hsv(steps, mode);\n\t    };\n\t\n\t    /**\n\t     * Initialize and generate CSS3 command for gradient\n\t     * @see TinyGradient::css\n\t     */\n\t    TinyGradient.css = function(colors, mode, direction) {\n\t        colors = Array.prototype.slice.call(arguments);\n\t        direction = colors.pop();\n\t        mode = colors.pop();\n\t\n\t        return TinyGradient.apply(null, colors).css(mode, direction);\n\t    };\n\t\n\t\n\t    // export\n\t    return TinyGradient;\n\t}));\n\n/***/ },\n\n/***/ 208:\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _react = __webpack_require__(2);\n\t\n\tvar _react2 = _interopRequireDefault(_react);\n\t\n\tvar _reactFela = __webpack_require__(101);\n\t\n\tvar _colors = __webpack_require__(14);\n\t\n\tvar _colors2 = _interopRequireDefault(_colors);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar Block = function Block(_ref) {\n\t  var className = _ref.className,\n\t      children = _ref.children;\n\t\n\t  return _react2.default.createElement(\n\t    'div',\n\t    { className: className },\n\t    children\n\t  );\n\t};\n\t\n\texports.default = (0, _reactFela.createComponent)(function (props) {\n\t  return {\n\t    minWidth: '16px',\n\t    height: '16px',\n\t    float: 'left',\n\t    textAlign: 'center',\n\t    padding: '15px',\n\t    border: 'none',\n\t    fontWeight: 'bold',\n\t    backgroundColor: props.isPrimary ? _colors2.default[props.i][1] : _colors2.default[props.i][0],\n\t\n\t    '&:hover': {\n\t      backgroundColor: 'black',\n\t      color: 'white'\n\t    }\n\t  };\n\t}, Block);\n\n/***/ },\n\n/***/ 435:\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _reactFela = __webpack_require__(101);\n\t\n\tvar _config = __webpack_require__(13);\n\t\n\tvar _config2 = _interopRequireDefault(_config);\n\t\n\tvar _Block = __webpack_require__(208);\n\t\n\tvar _Block2 = _interopRequireDefault(_Block);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar components = [];\n\t\n\tvar _loop = function _loop(i) {\n\t  var size = Math.round(i / 10 % 1 * 10);\n\t\n\t  var component = (0, _reactFela.createComponent)(function (props) {\n\t    return {\n\t      float: 'none',\n\t      display: 'inline-block',\n\t      border: size + 2 + 'px solid #000',\n\t      borderRadius: size * 6 + 'px'\n\t    };\n\t  }, _Block2.default);\n\t\n\t  components.push(component);\n\t};\n\t\n\tfor (var i = 0; i < _config2.default.size; i++) {\n\t  _loop(i);\n\t}\n\t\n\texports.default = components;\n\n/***/ }\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/13.b2849e35.chunk.js","import config from '../config';\nimport tinygradient from 'tinygradient';\n\nvar gradient1 = tinygradient.rgb(\n  ['#43C6AC', '#F8FFAE', '#fc00ff', '#CFDEF3', '#3494E6'],\n  config.size\n);\n\nvar gradient2 = tinygradient.rgb(\n  ['#dc2430', '#c2e59c', '#FFB75E', '#7b4397', '#00dbde'],\n  config.size\n);\n\nexport default gradient1.map((color, i) => {\n  return [`#${color.toHex()}`, `#${gradient2[i].toHex()}`];\n});\n\n\n\n// WEBPACK FOOTER //\n// ./src/utils/colors.js","var styles = {\n  'bold':      ['\\033[1m', '\\033[22m'],\n  'italic':    ['\\033[3m', '\\033[23m'],\n  'underline': ['\\033[4m', '\\033[24m'],\n  'inverse':   ['\\033[7m', '\\033[27m'],\n  'black':     ['\\033[30m', '\\033[39m'],\n  'red':       ['\\033[31m', '\\033[39m'],\n  'green':     ['\\033[32m', '\\033[39m'],\n  'yellow':    ['\\033[33m', '\\033[39m'],\n  'blue':      ['\\033[34m', '\\033[39m'],\n  'magenta':   ['\\033[35m', '\\033[39m'],\n  'cyan':      ['\\033[36m', '\\033[39m'],\n  'white':     ['\\033[37m', '\\033[39m'],\n  'default':   ['\\033[39m', '\\033[39m'],\n  'grey':      ['\\033[90m', '\\033[39m'],\n  'bgBlack':   ['\\033[40m', '\\033[49m'],\n  'bgRed':     ['\\033[41m', '\\033[49m'],\n  'bgGreen':   ['\\033[42m', '\\033[49m'],\n  'bgYellow':  ['\\033[43m', '\\033[49m'],\n  'bgBlue':    ['\\033[44m', '\\033[49m'],\n  'bgMagenta': ['\\033[45m', '\\033[49m'],\n  'bgCyan':    ['\\033[46m', '\\033[49m'],\n  'bgWhite':   ['\\033[47m', '\\033[49m'],\n  'bgDefault': ['\\033[49m', '\\033[49m']\n}\nObject.keys(styles).forEach(function(style) {\n  Object.defineProperty(String.prototype, style, {\n    get: function() { return styles[style][0] + this + styles[style][1]; },\n    enumerable: false\n  });\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/tinycolor/tinycolor.js\n// module id = 15\n// module chunks = 1 2 3 4 5 6 7 8 9 10 11 12 13","// TinyColor v1.4.1\n// https://github.com/bgrins/TinyColor\n// Brian Grinstead, MIT License\n\n(function(Math) {\n\nvar trimLeft = /^\\s+/,\n    trimRight = /\\s+$/,\n    tinyCounter = 0,\n    mathRound = Math.round,\n    mathMin = Math.min,\n    mathMax = Math.max,\n    mathRandom = Math.random;\n\nfunction tinycolor (color, opts) {\n\n    color = (color) ? color : '';\n    opts = opts || { };\n\n    // If input is already a tinycolor, return itself\n    if (color instanceof tinycolor) {\n       return color;\n    }\n    // If we are called as a function, call using new instead\n    if (!(this instanceof tinycolor)) {\n        return new tinycolor(color, opts);\n    }\n\n    var rgb = inputToRGB(color);\n    this._originalInput = color,\n    this._r = rgb.r,\n    this._g = rgb.g,\n    this._b = rgb.b,\n    this._a = rgb.a,\n    this._roundA = mathRound(100*this._a) / 100,\n    this._format = opts.format || rgb.format;\n    this._gradientType = opts.gradientType;\n\n    // Don't let the range of [0,255] come back in [0,1].\n    // Potentially lose a little bit of precision here, but will fix issues where\n    // .5 gets interpreted as half of the total, instead of half of 1\n    // If it was supposed to be 128, this was already taken care of by `inputToRgb`\n    if (this._r < 1) { this._r = mathRound(this._r); }\n    if (this._g < 1) { this._g = mathRound(this._g); }\n    if (this._b < 1) { this._b = mathRound(this._b); }\n\n    this._ok = rgb.ok;\n    this._tc_id = tinyCounter++;\n}\n\ntinycolor.prototype = {\n    isDark: function() {\n        return this.getBrightness() < 128;\n    },\n    isLight: function() {\n        return !this.isDark();\n    },\n    isValid: function() {\n        return this._ok;\n    },\n    getOriginalInput: function() {\n      return this._originalInput;\n    },\n    getFormat: function() {\n        return this._format;\n    },\n    getAlpha: function() {\n        return this._a;\n    },\n    getBrightness: function() {\n        //http://www.w3.org/TR/AERT#color-contrast\n        var rgb = this.toRgb();\n        return (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1000;\n    },\n    getLuminance: function() {\n        //http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef\n        var rgb = this.toRgb();\n        var RsRGB, GsRGB, BsRGB, R, G, B;\n        RsRGB = rgb.r/255;\n        GsRGB = rgb.g/255;\n        BsRGB = rgb.b/255;\n\n        if (RsRGB <= 0.03928) {R = RsRGB / 12.92;} else {R = Math.pow(((RsRGB + 0.055) / 1.055), 2.4);}\n        if (GsRGB <= 0.03928) {G = GsRGB / 12.92;} else {G = Math.pow(((GsRGB + 0.055) / 1.055), 2.4);}\n        if (BsRGB <= 0.03928) {B = BsRGB / 12.92;} else {B = Math.pow(((BsRGB + 0.055) / 1.055), 2.4);}\n        return (0.2126 * R) + (0.7152 * G) + (0.0722 * B);\n    },\n    setAlpha: function(value) {\n        this._a = boundAlpha(value);\n        this._roundA = mathRound(100*this._a) / 100;\n        return this;\n    },\n    toHsv: function() {\n        var hsv = rgbToHsv(this._r, this._g, this._b);\n        return { h: hsv.h * 360, s: hsv.s, v: hsv.v, a: this._a };\n    },\n    toHsvString: function() {\n        var hsv = rgbToHsv(this._r, this._g, this._b);\n        var h = mathRound(hsv.h * 360), s = mathRound(hsv.s * 100), v = mathRound(hsv.v * 100);\n        return (this._a == 1) ?\n          \"hsv(\"  + h + \", \" + s + \"%, \" + v + \"%)\" :\n          \"hsva(\" + h + \", \" + s + \"%, \" + v + \"%, \"+ this._roundA + \")\";\n    },\n    toHsl: function() {\n        var hsl = rgbToHsl(this._r, this._g, this._b);\n        return { h: hsl.h * 360, s: hsl.s, l: hsl.l, a: this._a };\n    },\n    toHslString: function() {\n        var hsl = rgbToHsl(this._r, this._g, this._b);\n        var h = mathRound(hsl.h * 360), s = mathRound(hsl.s * 100), l = mathRound(hsl.l * 100);\n        return (this._a == 1) ?\n          \"hsl(\"  + h + \", \" + s + \"%, \" + l + \"%)\" :\n          \"hsla(\" + h + \", \" + s + \"%, \" + l + \"%, \"+ this._roundA + \")\";\n    },\n    toHex: function(allow3Char) {\n        return rgbToHex(this._r, this._g, this._b, allow3Char);\n    },\n    toHexString: function(allow3Char) {\n        return '#' + this.toHex(allow3Char);\n    },\n    toHex8: function(allow4Char) {\n        return rgbaToHex(this._r, this._g, this._b, this._a, allow4Char);\n    },\n    toHex8String: function(allow4Char) {\n        return '#' + this.toHex8(allow4Char);\n    },\n    toRgb: function() {\n        return { r: mathRound(this._r), g: mathRound(this._g), b: mathRound(this._b), a: this._a };\n    },\n    toRgbString: function() {\n        return (this._a == 1) ?\n          \"rgb(\"  + mathRound(this._r) + \", \" + mathRound(this._g) + \", \" + mathRound(this._b) + \")\" :\n          \"rgba(\" + mathRound(this._r) + \", \" + mathRound(this._g) + \", \" + mathRound(this._b) + \", \" + this._roundA + \")\";\n    },\n    toPercentageRgb: function() {\n        return { r: mathRound(bound01(this._r, 255) * 100) + \"%\", g: mathRound(bound01(this._g, 255) * 100) + \"%\", b: mathRound(bound01(this._b, 255) * 100) + \"%\", a: this._a };\n    },\n    toPercentageRgbString: function() {\n        return (this._a == 1) ?\n          \"rgb(\"  + mathRound(bound01(this._r, 255) * 100) + \"%, \" + mathRound(bound01(this._g, 255) * 100) + \"%, \" + mathRound(bound01(this._b, 255) * 100) + \"%)\" :\n          \"rgba(\" + mathRound(bound01(this._r, 255) * 100) + \"%, \" + mathRound(bound01(this._g, 255) * 100) + \"%, \" + mathRound(bound01(this._b, 255) * 100) + \"%, \" + this._roundA + \")\";\n    },\n    toName: function() {\n        if (this._a === 0) {\n            return \"transparent\";\n        }\n\n        if (this._a < 1) {\n            return false;\n        }\n\n        return hexNames[rgbToHex(this._r, this._g, this._b, true)] || false;\n    },\n    toFilter: function(secondColor) {\n        var hex8String = '#' + rgbaToArgbHex(this._r, this._g, this._b, this._a);\n        var secondHex8String = hex8String;\n        var gradientType = this._gradientType ? \"GradientType = 1, \" : \"\";\n\n        if (secondColor) {\n            var s = tinycolor(secondColor);\n            secondHex8String = '#' + rgbaToArgbHex(s._r, s._g, s._b, s._a);\n        }\n\n        return \"progid:DXImageTransform.Microsoft.gradient(\"+gradientType+\"startColorstr=\"+hex8String+\",endColorstr=\"+secondHex8String+\")\";\n    },\n    toString: function(format) {\n        var formatSet = !!format;\n        format = format || this._format;\n\n        var formattedString = false;\n        var hasAlpha = this._a < 1 && this._a >= 0;\n        var needsAlphaFormat = !formatSet && hasAlpha && (format === \"hex\" || format === \"hex6\" || format === \"hex3\" || format === \"hex4\" || format === \"hex8\" || format === \"name\");\n\n        if (needsAlphaFormat) {\n            // Special case for \"transparent\", all other non-alpha formats\n            // will return rgba when there is transparency.\n            if (format === \"name\" && this._a === 0) {\n                return this.toName();\n            }\n            return this.toRgbString();\n        }\n        if (format === \"rgb\") {\n            formattedString = this.toRgbString();\n        }\n        if (format === \"prgb\") {\n            formattedString = this.toPercentageRgbString();\n        }\n        if (format === \"hex\" || format === \"hex6\") {\n            formattedString = this.toHexString();\n        }\n        if (format === \"hex3\") {\n            formattedString = this.toHexString(true);\n        }\n        if (format === \"hex4\") {\n            formattedString = this.toHex8String(true);\n        }\n        if (format === \"hex8\") {\n            formattedString = this.toHex8String();\n        }\n        if (format === \"name\") {\n            formattedString = this.toName();\n        }\n        if (format === \"hsl\") {\n            formattedString = this.toHslString();\n        }\n        if (format === \"hsv\") {\n            formattedString = this.toHsvString();\n        }\n\n        return formattedString || this.toHexString();\n    },\n    clone: function() {\n        return tinycolor(this.toString());\n    },\n\n    _applyModification: function(fn, args) {\n        var color = fn.apply(null, [this].concat([].slice.call(args)));\n        this._r = color._r;\n        this._g = color._g;\n        this._b = color._b;\n        this.setAlpha(color._a);\n        return this;\n    },\n    lighten: function() {\n        return this._applyModification(lighten, arguments);\n    },\n    brighten: function() {\n        return this._applyModification(brighten, arguments);\n    },\n    darken: function() {\n        return this._applyModification(darken, arguments);\n    },\n    desaturate: function() {\n        return this._applyModification(desaturate, arguments);\n    },\n    saturate: function() {\n        return this._applyModification(saturate, arguments);\n    },\n    greyscale: function() {\n        return this._applyModification(greyscale, arguments);\n    },\n    spin: function() {\n        return this._applyModification(spin, arguments);\n    },\n\n    _applyCombination: function(fn, args) {\n        return fn.apply(null, [this].concat([].slice.call(args)));\n    },\n    analogous: function() {\n        return this._applyCombination(analogous, arguments);\n    },\n    complement: function() {\n        return this._applyCombination(complement, arguments);\n    },\n    monochromatic: function() {\n        return this._applyCombination(monochromatic, arguments);\n    },\n    splitcomplement: function() {\n        return this._applyCombination(splitcomplement, arguments);\n    },\n    triad: function() {\n        return this._applyCombination(triad, arguments);\n    },\n    tetrad: function() {\n        return this._applyCombination(tetrad, arguments);\n    }\n};\n\n// If input is an object, force 1 into \"1.0\" to handle ratios properly\n// String input requires \"1.0\" as input, so 1 will be treated as 1\ntinycolor.fromRatio = function(color, opts) {\n    if (typeof color == \"object\") {\n        var newColor = {};\n        for (var i in color) {\n            if (color.hasOwnProperty(i)) {\n                if (i === \"a\") {\n                    newColor[i] = color[i];\n                }\n                else {\n                    newColor[i] = convertToPercentage(color[i]);\n                }\n            }\n        }\n        color = newColor;\n    }\n\n    return tinycolor(color, opts);\n};\n\n// Given a string or object, convert that input to RGB\n// Possible string inputs:\n//\n//     \"red\"\n//     \"#f00\" or \"f00\"\n//     \"#ff0000\" or \"ff0000\"\n//     \"#ff000000\" or \"ff000000\"\n//     \"rgb 255 0 0\" or \"rgb (255, 0, 0)\"\n//     \"rgb 1.0 0 0\" or \"rgb (1, 0, 0)\"\n//     \"rgba (255, 0, 0, 1)\" or \"rgba 255, 0, 0, 1\"\n//     \"rgba (1.0, 0, 0, 1)\" or \"rgba 1.0, 0, 0, 1\"\n//     \"hsl(0, 100%, 50%)\" or \"hsl 0 100% 50%\"\n//     \"hsla(0, 100%, 50%, 1)\" or \"hsla 0 100% 50%, 1\"\n//     \"hsv(0, 100%, 100%)\" or \"hsv 0 100% 100%\"\n//\nfunction inputToRGB(color) {\n\n    var rgb = { r: 0, g: 0, b: 0 };\n    var a = 1;\n    var s = null;\n    var v = null;\n    var l = null;\n    var ok = false;\n    var format = false;\n\n    if (typeof color == \"string\") {\n        color = stringInputToObject(color);\n    }\n\n    if (typeof color == \"object\") {\n        if (isValidCSSUnit(color.r) && isValidCSSUnit(color.g) && isValidCSSUnit(color.b)) {\n            rgb = rgbToRgb(color.r, color.g, color.b);\n            ok = true;\n            format = String(color.r).substr(-1) === \"%\" ? \"prgb\" : \"rgb\";\n        }\n        else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.v)) {\n            s = convertToPercentage(color.s);\n            v = convertToPercentage(color.v);\n            rgb = hsvToRgb(color.h, s, v);\n            ok = true;\n            format = \"hsv\";\n        }\n        else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.l)) {\n            s = convertToPercentage(color.s);\n            l = convertToPercentage(color.l);\n            rgb = hslToRgb(color.h, s, l);\n            ok = true;\n            format = \"hsl\";\n        }\n\n        if (color.hasOwnProperty(\"a\")) {\n            a = color.a;\n        }\n    }\n\n    a = boundAlpha(a);\n\n    return {\n        ok: ok,\n        format: color.format || format,\n        r: mathMin(255, mathMax(rgb.r, 0)),\n        g: mathMin(255, mathMax(rgb.g, 0)),\n        b: mathMin(255, mathMax(rgb.b, 0)),\n        a: a\n    };\n}\n\n\n// Conversion Functions\n// --------------------\n\n// `rgbToHsl`, `rgbToHsv`, `hslToRgb`, `hsvToRgb` modified from:\n// <http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript>\n\n// `rgbToRgb`\n// Handle bounds / percentage checking to conform to CSS color spec\n// <http://www.w3.org/TR/css3-color/>\n// *Assumes:* r, g, b in [0, 255] or [0, 1]\n// *Returns:* { r, g, b } in [0, 255]\nfunction rgbToRgb(r, g, b){\n    return {\n        r: bound01(r, 255) * 255,\n        g: bound01(g, 255) * 255,\n        b: bound01(b, 255) * 255\n    };\n}\n\n// `rgbToHsl`\n// Converts an RGB color value to HSL.\n// *Assumes:* r, g, and b are contained in [0, 255] or [0, 1]\n// *Returns:* { h, s, l } in [0,1]\nfunction rgbToHsl(r, g, b) {\n\n    r = bound01(r, 255);\n    g = bound01(g, 255);\n    b = bound01(b, 255);\n\n    var max = mathMax(r, g, b), min = mathMin(r, g, b);\n    var h, s, l = (max + min) / 2;\n\n    if(max == min) {\n        h = s = 0; // achromatic\n    }\n    else {\n        var d = max - min;\n        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n        switch(max) {\n            case r: h = (g - b) / d + (g < b ? 6 : 0); break;\n            case g: h = (b - r) / d + 2; break;\n            case b: h = (r - g) / d + 4; break;\n        }\n\n        h /= 6;\n    }\n\n    return { h: h, s: s, l: l };\n}\n\n// `hslToRgb`\n// Converts an HSL color value to RGB.\n// *Assumes:* h is contained in [0, 1] or [0, 360] and s and l are contained [0, 1] or [0, 100]\n// *Returns:* { r, g, b } in the set [0, 255]\nfunction hslToRgb(h, s, l) {\n    var r, g, b;\n\n    h = bound01(h, 360);\n    s = bound01(s, 100);\n    l = bound01(l, 100);\n\n    function hue2rgb(p, q, t) {\n        if(t < 0) t += 1;\n        if(t > 1) t -= 1;\n        if(t < 1/6) return p + (q - p) * 6 * t;\n        if(t < 1/2) return q;\n        if(t < 2/3) return p + (q - p) * (2/3 - t) * 6;\n        return p;\n    }\n\n    if(s === 0) {\n        r = g = b = l; // achromatic\n    }\n    else {\n        var q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n        var p = 2 * l - q;\n        r = hue2rgb(p, q, h + 1/3);\n        g = hue2rgb(p, q, h);\n        b = hue2rgb(p, q, h - 1/3);\n    }\n\n    return { r: r * 255, g: g * 255, b: b * 255 };\n}\n\n// `rgbToHsv`\n// Converts an RGB color value to HSV\n// *Assumes:* r, g, and b are contained in the set [0, 255] or [0, 1]\n// *Returns:* { h, s, v } in [0,1]\nfunction rgbToHsv(r, g, b) {\n\n    r = bound01(r, 255);\n    g = bound01(g, 255);\n    b = bound01(b, 255);\n\n    var max = mathMax(r, g, b), min = mathMin(r, g, b);\n    var h, s, v = max;\n\n    var d = max - min;\n    s = max === 0 ? 0 : d / max;\n\n    if(max == min) {\n        h = 0; // achromatic\n    }\n    else {\n        switch(max) {\n            case r: h = (g - b) / d + (g < b ? 6 : 0); break;\n            case g: h = (b - r) / d + 2; break;\n            case b: h = (r - g) / d + 4; break;\n        }\n        h /= 6;\n    }\n    return { h: h, s: s, v: v };\n}\n\n// `hsvToRgb`\n// Converts an HSV color value to RGB.\n// *Assumes:* h is contained in [0, 1] or [0, 360] and s and v are contained in [0, 1] or [0, 100]\n// *Returns:* { r, g, b } in the set [0, 255]\n function hsvToRgb(h, s, v) {\n\n    h = bound01(h, 360) * 6;\n    s = bound01(s, 100);\n    v = bound01(v, 100);\n\n    var i = Math.floor(h),\n        f = h - i,\n        p = v * (1 - s),\n        q = v * (1 - f * s),\n        t = v * (1 - (1 - f) * s),\n        mod = i % 6,\n        r = [v, q, p, p, t, v][mod],\n        g = [t, v, v, q, p, p][mod],\n        b = [p, p, t, v, v, q][mod];\n\n    return { r: r * 255, g: g * 255, b: b * 255 };\n}\n\n// `rgbToHex`\n// Converts an RGB color to hex\n// Assumes r, g, and b are contained in the set [0, 255]\n// Returns a 3 or 6 character hex\nfunction rgbToHex(r, g, b, allow3Char) {\n\n    var hex = [\n        pad2(mathRound(r).toString(16)),\n        pad2(mathRound(g).toString(16)),\n        pad2(mathRound(b).toString(16))\n    ];\n\n    // Return a 3 character hex if possible\n    if (allow3Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1)) {\n        return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0);\n    }\n\n    return hex.join(\"\");\n}\n\n// `rgbaToHex`\n// Converts an RGBA color plus alpha transparency to hex\n// Assumes r, g, b are contained in the set [0, 255] and\n// a in [0, 1]. Returns a 4 or 8 character rgba hex\nfunction rgbaToHex(r, g, b, a, allow4Char) {\n\n    var hex = [\n        pad2(mathRound(r).toString(16)),\n        pad2(mathRound(g).toString(16)),\n        pad2(mathRound(b).toString(16)),\n        pad2(convertDecimalToHex(a))\n    ];\n\n    // Return a 4 character hex if possible\n    if (allow4Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1) && hex[3].charAt(0) == hex[3].charAt(1)) {\n        return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0) + hex[3].charAt(0);\n    }\n\n    return hex.join(\"\");\n}\n\n// `rgbaToArgbHex`\n// Converts an RGBA color to an ARGB Hex8 string\n// Rarely used, but required for \"toFilter()\"\nfunction rgbaToArgbHex(r, g, b, a) {\n\n    var hex = [\n        pad2(convertDecimalToHex(a)),\n        pad2(mathRound(r).toString(16)),\n        pad2(mathRound(g).toString(16)),\n        pad2(mathRound(b).toString(16))\n    ];\n\n    return hex.join(\"\");\n}\n\n// `equals`\n// Can be called with any tinycolor input\ntinycolor.equals = function (color1, color2) {\n    if (!color1 || !color2) { return false; }\n    return tinycolor(color1).toRgbString() == tinycolor(color2).toRgbString();\n};\n\ntinycolor.random = function() {\n    return tinycolor.fromRatio({\n        r: mathRandom(),\n        g: mathRandom(),\n        b: mathRandom()\n    });\n};\n\n\n// Modification Functions\n// ----------------------\n// Thanks to less.js for some of the basics here\n// <https://github.com/cloudhead/less.js/blob/master/lib/less/functions.js>\n\nfunction desaturate(color, amount) {\n    amount = (amount === 0) ? 0 : (amount || 10);\n    var hsl = tinycolor(color).toHsl();\n    hsl.s -= amount / 100;\n    hsl.s = clamp01(hsl.s);\n    return tinycolor(hsl);\n}\n\nfunction saturate(color, amount) {\n    amount = (amount === 0) ? 0 : (amount || 10);\n    var hsl = tinycolor(color).toHsl();\n    hsl.s += amount / 100;\n    hsl.s = clamp01(hsl.s);\n    return tinycolor(hsl);\n}\n\nfunction greyscale(color) {\n    return tinycolor(color).desaturate(100);\n}\n\nfunction lighten (color, amount) {\n    amount = (amount === 0) ? 0 : (amount || 10);\n    var hsl = tinycolor(color).toHsl();\n    hsl.l += amount / 100;\n    hsl.l = clamp01(hsl.l);\n    return tinycolor(hsl);\n}\n\nfunction brighten(color, amount) {\n    amount = (amount === 0) ? 0 : (amount || 10);\n    var rgb = tinycolor(color).toRgb();\n    rgb.r = mathMax(0, mathMin(255, rgb.r - mathRound(255 * - (amount / 100))));\n    rgb.g = mathMax(0, mathMin(255, rgb.g - mathRound(255 * - (amount / 100))));\n    rgb.b = mathMax(0, mathMin(255, rgb.b - mathRound(255 * - (amount / 100))));\n    return tinycolor(rgb);\n}\n\nfunction darken (color, amount) {\n    amount = (amount === 0) ? 0 : (amount || 10);\n    var hsl = tinycolor(color).toHsl();\n    hsl.l -= amount / 100;\n    hsl.l = clamp01(hsl.l);\n    return tinycolor(hsl);\n}\n\n// Spin takes a positive or negative amount within [-360, 360] indicating the change of hue.\n// Values outside of this range will be wrapped into this range.\nfunction spin(color, amount) {\n    var hsl = tinycolor(color).toHsl();\n    var hue = (hsl.h + amount) % 360;\n    hsl.h = hue < 0 ? 360 + hue : hue;\n    return tinycolor(hsl);\n}\n\n// Combination Functions\n// ---------------------\n// Thanks to jQuery xColor for some of the ideas behind these\n// <https://github.com/infusion/jQuery-xcolor/blob/master/jquery.xcolor.js>\n\nfunction complement(color) {\n    var hsl = tinycolor(color).toHsl();\n    hsl.h = (hsl.h + 180) % 360;\n    return tinycolor(hsl);\n}\n\nfunction triad(color) {\n    var hsl = tinycolor(color).toHsl();\n    var h = hsl.h;\n    return [\n        tinycolor(color),\n        tinycolor({ h: (h + 120) % 360, s: hsl.s, l: hsl.l }),\n        tinycolor({ h: (h + 240) % 360, s: hsl.s, l: hsl.l })\n    ];\n}\n\nfunction tetrad(color) {\n    var hsl = tinycolor(color).toHsl();\n    var h = hsl.h;\n    return [\n        tinycolor(color),\n        tinycolor({ h: (h + 90) % 360, s: hsl.s, l: hsl.l }),\n        tinycolor({ h: (h + 180) % 360, s: hsl.s, l: hsl.l }),\n        tinycolor({ h: (h + 270) % 360, s: hsl.s, l: hsl.l })\n    ];\n}\n\nfunction splitcomplement(color) {\n    var hsl = tinycolor(color).toHsl();\n    var h = hsl.h;\n    return [\n        tinycolor(color),\n        tinycolor({ h: (h + 72) % 360, s: hsl.s, l: hsl.l}),\n        tinycolor({ h: (h + 216) % 360, s: hsl.s, l: hsl.l})\n    ];\n}\n\nfunction analogous(color, results, slices) {\n    results = results || 6;\n    slices = slices || 30;\n\n    var hsl = tinycolor(color).toHsl();\n    var part = 360 / slices;\n    var ret = [tinycolor(color)];\n\n    for (hsl.h = ((hsl.h - (part * results >> 1)) + 720) % 360; --results; ) {\n        hsl.h = (hsl.h + part) % 360;\n        ret.push(tinycolor(hsl));\n    }\n    return ret;\n}\n\nfunction monochromatic(color, results) {\n    results = results || 6;\n    var hsv = tinycolor(color).toHsv();\n    var h = hsv.h, s = hsv.s, v = hsv.v;\n    var ret = [];\n    var modification = 1 / results;\n\n    while (results--) {\n        ret.push(tinycolor({ h: h, s: s, v: v}));\n        v = (v + modification) % 1;\n    }\n\n    return ret;\n}\n\n// Utility Functions\n// ---------------------\n\ntinycolor.mix = function(color1, color2, amount) {\n    amount = (amount === 0) ? 0 : (amount || 50);\n\n    var rgb1 = tinycolor(color1).toRgb();\n    var rgb2 = tinycolor(color2).toRgb();\n\n    var p = amount / 100;\n\n    var rgba = {\n        r: ((rgb2.r - rgb1.r) * p) + rgb1.r,\n        g: ((rgb2.g - rgb1.g) * p) + rgb1.g,\n        b: ((rgb2.b - rgb1.b) * p) + rgb1.b,\n        a: ((rgb2.a - rgb1.a) * p) + rgb1.a\n    };\n\n    return tinycolor(rgba);\n};\n\n\n// Readability Functions\n// ---------------------\n// <http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef (WCAG Version 2)\n\n// `contrast`\n// Analyze the 2 colors and returns the color contrast defined by (WCAG Version 2)\ntinycolor.readability = function(color1, color2) {\n    var c1 = tinycolor(color1);\n    var c2 = tinycolor(color2);\n    return (Math.max(c1.getLuminance(),c2.getLuminance())+0.05) / (Math.min(c1.getLuminance(),c2.getLuminance())+0.05);\n};\n\n// `isReadable`\n// Ensure that foreground and background color combinations meet WCAG2 guidelines.\n// The third argument is an optional Object.\n//      the 'level' property states 'AA' or 'AAA' - if missing or invalid, it defaults to 'AA';\n//      the 'size' property states 'large' or 'small' - if missing or invalid, it defaults to 'small'.\n// If the entire object is absent, isReadable defaults to {level:\"AA\",size:\"small\"}.\n\n// *Example*\n//    tinycolor.isReadable(\"#000\", \"#111\") => false\n//    tinycolor.isReadable(\"#000\", \"#111\",{level:\"AA\",size:\"large\"}) => false\ntinycolor.isReadable = function(color1, color2, wcag2) {\n    var readability = tinycolor.readability(color1, color2);\n    var wcag2Parms, out;\n\n    out = false;\n\n    wcag2Parms = validateWCAG2Parms(wcag2);\n    switch (wcag2Parms.level + wcag2Parms.size) {\n        case \"AAsmall\":\n        case \"AAAlarge\":\n            out = readability >= 4.5;\n            break;\n        case \"AAlarge\":\n            out = readability >= 3;\n            break;\n        case \"AAAsmall\":\n            out = readability >= 7;\n            break;\n    }\n    return out;\n\n};\n\n// `mostReadable`\n// Given a base color and a list of possible foreground or background\n// colors for that base, returns the most readable color.\n// Optionally returns Black or White if the most readable color is unreadable.\n// *Example*\n//    tinycolor.mostReadable(tinycolor.mostReadable(\"#123\", [\"#124\", \"#125\"],{includeFallbackColors:false}).toHexString(); // \"#112255\"\n//    tinycolor.mostReadable(tinycolor.mostReadable(\"#123\", [\"#124\", \"#125\"],{includeFallbackColors:true}).toHexString();  // \"#ffffff\"\n//    tinycolor.mostReadable(\"#a8015a\", [\"#faf3f3\"],{includeFallbackColors:true,level:\"AAA\",size:\"large\"}).toHexString(); // \"#faf3f3\"\n//    tinycolor.mostReadable(\"#a8015a\", [\"#faf3f3\"],{includeFallbackColors:true,level:\"AAA\",size:\"small\"}).toHexString(); // \"#ffffff\"\ntinycolor.mostReadable = function(baseColor, colorList, args) {\n    var bestColor = null;\n    var bestScore = 0;\n    var readability;\n    var includeFallbackColors, level, size ;\n    args = args || {};\n    includeFallbackColors = args.includeFallbackColors ;\n    level = args.level;\n    size = args.size;\n\n    for (var i= 0; i < colorList.length ; i++) {\n        readability = tinycolor.readability(baseColor, colorList[i]);\n        if (readability > bestScore) {\n            bestScore = readability;\n            bestColor = tinycolor(colorList[i]);\n        }\n    }\n\n    if (tinycolor.isReadable(baseColor, bestColor, {\"level\":level,\"size\":size}) || !includeFallbackColors) {\n        return bestColor;\n    }\n    else {\n        args.includeFallbackColors=false;\n        return tinycolor.mostReadable(baseColor,[\"#fff\", \"#000\"],args);\n    }\n};\n\n\n// Big List of Colors\n// ------------------\n// <http://www.w3.org/TR/css3-color/#svg-color>\nvar names = tinycolor.names = {\n    aliceblue: \"f0f8ff\",\n    antiquewhite: \"faebd7\",\n    aqua: \"0ff\",\n    aquamarine: \"7fffd4\",\n    azure: \"f0ffff\",\n    beige: \"f5f5dc\",\n    bisque: \"ffe4c4\",\n    black: \"000\",\n    blanchedalmond: \"ffebcd\",\n    blue: \"00f\",\n    blueviolet: \"8a2be2\",\n    brown: \"a52a2a\",\n    burlywood: \"deb887\",\n    burntsienna: \"ea7e5d\",\n    cadetblue: \"5f9ea0\",\n    chartreuse: \"7fff00\",\n    chocolate: \"d2691e\",\n    coral: \"ff7f50\",\n    cornflowerblue: \"6495ed\",\n    cornsilk: \"fff8dc\",\n    crimson: \"dc143c\",\n    cyan: \"0ff\",\n    darkblue: \"00008b\",\n    darkcyan: \"008b8b\",\n    darkgoldenrod: \"b8860b\",\n    darkgray: \"a9a9a9\",\n    darkgreen: \"006400\",\n    darkgrey: \"a9a9a9\",\n    darkkhaki: \"bdb76b\",\n    darkmagenta: \"8b008b\",\n    darkolivegreen: \"556b2f\",\n    darkorange: \"ff8c00\",\n    darkorchid: \"9932cc\",\n    darkred: \"8b0000\",\n    darksalmon: \"e9967a\",\n    darkseagreen: \"8fbc8f\",\n    darkslateblue: \"483d8b\",\n    darkslategray: \"2f4f4f\",\n    darkslategrey: \"2f4f4f\",\n    darkturquoise: \"00ced1\",\n    darkviolet: \"9400d3\",\n    deeppink: \"ff1493\",\n    deepskyblue: \"00bfff\",\n    dimgray: \"696969\",\n    dimgrey: \"696969\",\n    dodgerblue: \"1e90ff\",\n    firebrick: \"b22222\",\n    floralwhite: \"fffaf0\",\n    forestgreen: \"228b22\",\n    fuchsia: \"f0f\",\n    gainsboro: \"dcdcdc\",\n    ghostwhite: \"f8f8ff\",\n    gold: \"ffd700\",\n    goldenrod: \"daa520\",\n    gray: \"808080\",\n    green: \"008000\",\n    greenyellow: \"adff2f\",\n    grey: \"808080\",\n    honeydew: \"f0fff0\",\n    hotpink: \"ff69b4\",\n    indianred: \"cd5c5c\",\n    indigo: \"4b0082\",\n    ivory: \"fffff0\",\n    khaki: \"f0e68c\",\n    lavender: \"e6e6fa\",\n    lavenderblush: \"fff0f5\",\n    lawngreen: \"7cfc00\",\n    lemonchiffon: \"fffacd\",\n    lightblue: \"add8e6\",\n    lightcoral: \"f08080\",\n    lightcyan: \"e0ffff\",\n    lightgoldenrodyellow: \"fafad2\",\n    lightgray: \"d3d3d3\",\n    lightgreen: \"90ee90\",\n    lightgrey: \"d3d3d3\",\n    lightpink: \"ffb6c1\",\n    lightsalmon: \"ffa07a\",\n    lightseagreen: \"20b2aa\",\n    lightskyblue: \"87cefa\",\n    lightslategray: \"789\",\n    lightslategrey: \"789\",\n    lightsteelblue: \"b0c4de\",\n    lightyellow: \"ffffe0\",\n    lime: \"0f0\",\n    limegreen: \"32cd32\",\n    linen: \"faf0e6\",\n    magenta: \"f0f\",\n    maroon: \"800000\",\n    mediumaquamarine: \"66cdaa\",\n    mediumblue: \"0000cd\",\n    mediumorchid: \"ba55d3\",\n    mediumpurple: \"9370db\",\n    mediumseagreen: \"3cb371\",\n    mediumslateblue: \"7b68ee\",\n    mediumspringgreen: \"00fa9a\",\n    mediumturquoise: \"48d1cc\",\n    mediumvioletred: \"c71585\",\n    midnightblue: \"191970\",\n    mintcream: \"f5fffa\",\n    mistyrose: \"ffe4e1\",\n    moccasin: \"ffe4b5\",\n    navajowhite: \"ffdead\",\n    navy: \"000080\",\n    oldlace: \"fdf5e6\",\n    olive: \"808000\",\n    olivedrab: \"6b8e23\",\n    orange: \"ffa500\",\n    orangered: \"ff4500\",\n    orchid: \"da70d6\",\n    palegoldenrod: \"eee8aa\",\n    palegreen: \"98fb98\",\n    paleturquoise: \"afeeee\",\n    palevioletred: \"db7093\",\n    papayawhip: \"ffefd5\",\n    peachpuff: \"ffdab9\",\n    peru: \"cd853f\",\n    pink: \"ffc0cb\",\n    plum: \"dda0dd\",\n    powderblue: \"b0e0e6\",\n    purple: \"800080\",\n    rebeccapurple: \"663399\",\n    red: \"f00\",\n    rosybrown: \"bc8f8f\",\n    royalblue: \"4169e1\",\n    saddlebrown: \"8b4513\",\n    salmon: \"fa8072\",\n    sandybrown: \"f4a460\",\n    seagreen: \"2e8b57\",\n    seashell: \"fff5ee\",\n    sienna: \"a0522d\",\n    silver: \"c0c0c0\",\n    skyblue: \"87ceeb\",\n    slateblue: \"6a5acd\",\n    slategray: \"708090\",\n    slategrey: \"708090\",\n    snow: \"fffafa\",\n    springgreen: \"00ff7f\",\n    steelblue: \"4682b4\",\n    tan: \"d2b48c\",\n    teal: \"008080\",\n    thistle: \"d8bfd8\",\n    tomato: \"ff6347\",\n    turquoise: \"40e0d0\",\n    violet: \"ee82ee\",\n    wheat: \"f5deb3\",\n    white: \"fff\",\n    whitesmoke: \"f5f5f5\",\n    yellow: \"ff0\",\n    yellowgreen: \"9acd32\"\n};\n\n// Make it easy to access colors via `hexNames[hex]`\nvar hexNames = tinycolor.hexNames = flip(names);\n\n\n// Utilities\n// ---------\n\n// `{ 'name1': 'val1' }` becomes `{ 'val1': 'name1' }`\nfunction flip(o) {\n    var flipped = { };\n    for (var i in o) {\n        if (o.hasOwnProperty(i)) {\n            flipped[o[i]] = i;\n        }\n    }\n    return flipped;\n}\n\n// Return a valid alpha value [0,1] with all invalid values being set to 1\nfunction boundAlpha(a) {\n    a = parseFloat(a);\n\n    if (isNaN(a) || a < 0 || a > 1) {\n        a = 1;\n    }\n\n    return a;\n}\n\n// Take input from [0, n] and return it as [0, 1]\nfunction bound01(n, max) {\n    if (isOnePointZero(n)) { n = \"100%\"; }\n\n    var processPercent = isPercentage(n);\n    n = mathMin(max, mathMax(0, parseFloat(n)));\n\n    // Automatically convert percentage into number\n    if (processPercent) {\n        n = parseInt(n * max, 10) / 100;\n    }\n\n    // Handle floating point rounding errors\n    if ((Math.abs(n - max) < 0.000001)) {\n        return 1;\n    }\n\n    // Convert into [0, 1] range if it isn't already\n    return (n % max) / parseFloat(max);\n}\n\n// Force a number between 0 and 1\nfunction clamp01(val) {\n    return mathMin(1, mathMax(0, val));\n}\n\n// Parse a base-16 hex value into a base-10 integer\nfunction parseIntFromHex(val) {\n    return parseInt(val, 16);\n}\n\n// Need to handle 1.0 as 100%, since once it is a number, there is no difference between it and 1\n// <http://stackoverflow.com/questions/7422072/javascript-how-to-detect-number-as-a-decimal-including-1-0>\nfunction isOnePointZero(n) {\n    return typeof n == \"string\" && n.indexOf('.') != -1 && parseFloat(n) === 1;\n}\n\n// Check to see if string passed in is a percentage\nfunction isPercentage(n) {\n    return typeof n === \"string\" && n.indexOf('%') != -1;\n}\n\n// Force a hex value to have 2 characters\nfunction pad2(c) {\n    return c.length == 1 ? '0' + c : '' + c;\n}\n\n// Replace a decimal with it's percentage value\nfunction convertToPercentage(n) {\n    if (n <= 1) {\n        n = (n * 100) + \"%\";\n    }\n\n    return n;\n}\n\n// Converts a decimal to a hex value\nfunction convertDecimalToHex(d) {\n    return Math.round(parseFloat(d) * 255).toString(16);\n}\n// Converts a hex value to a decimal\nfunction convertHexToDecimal(h) {\n    return (parseIntFromHex(h) / 255);\n}\n\nvar matchers = (function() {\n\n    // <http://www.w3.org/TR/css3-values/#integers>\n    var CSS_INTEGER = \"[-\\\\+]?\\\\d+%?\";\n\n    // <http://www.w3.org/TR/css3-values/#number-value>\n    var CSS_NUMBER = \"[-\\\\+]?\\\\d*\\\\.\\\\d+%?\";\n\n    // Allow positive/negative integer/number.  Don't capture the either/or, just the entire outcome.\n    var CSS_UNIT = \"(?:\" + CSS_NUMBER + \")|(?:\" + CSS_INTEGER + \")\";\n\n    // Actual matching.\n    // Parentheses and commas are optional, but not required.\n    // Whitespace can take the place of commas or opening paren\n    var PERMISSIVE_MATCH3 = \"[\\\\s|\\\\(]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")\\\\s*\\\\)?\";\n    var PERMISSIVE_MATCH4 = \"[\\\\s|\\\\(]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")\\\\s*\\\\)?\";\n\n    return {\n        CSS_UNIT: new RegExp(CSS_UNIT),\n        rgb: new RegExp(\"rgb\" + PERMISSIVE_MATCH3),\n        rgba: new RegExp(\"rgba\" + PERMISSIVE_MATCH4),\n        hsl: new RegExp(\"hsl\" + PERMISSIVE_MATCH3),\n        hsla: new RegExp(\"hsla\" + PERMISSIVE_MATCH4),\n        hsv: new RegExp(\"hsv\" + PERMISSIVE_MATCH3),\n        hsva: new RegExp(\"hsva\" + PERMISSIVE_MATCH4),\n        hex3: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\n        hex6: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,\n        hex4: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\n        hex8: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/\n    };\n})();\n\n// `isValidCSSUnit`\n// Take in a single string / number and check to see if it looks like a CSS unit\n// (see `matchers` above for definition).\nfunction isValidCSSUnit(color) {\n    return !!matchers.CSS_UNIT.exec(color);\n}\n\n// `stringInputToObject`\n// Permissive string parsing.  Take in a number of formats, and output an object\n// based on detected format.  Returns `{ r, g, b }` or `{ h, s, l }` or `{ h, s, v}`\nfunction stringInputToObject(color) {\n\n    color = color.replace(trimLeft,'').replace(trimRight, '').toLowerCase();\n    var named = false;\n    if (names[color]) {\n        color = names[color];\n        named = true;\n    }\n    else if (color == 'transparent') {\n        return { r: 0, g: 0, b: 0, a: 0, format: \"name\" };\n    }\n\n    // Try to match string input using regular expressions.\n    // Keep most of the number bounding out of this function - don't worry about [0,1] or [0,100] or [0,360]\n    // Just return an object and let the conversion functions handle that.\n    // This way the result will be the same whether the tinycolor is initialized with string or object.\n    var match;\n    if ((match = matchers.rgb.exec(color))) {\n        return { r: match[1], g: match[2], b: match[3] };\n    }\n    if ((match = matchers.rgba.exec(color))) {\n        return { r: match[1], g: match[2], b: match[3], a: match[4] };\n    }\n    if ((match = matchers.hsl.exec(color))) {\n        return { h: match[1], s: match[2], l: match[3] };\n    }\n    if ((match = matchers.hsla.exec(color))) {\n        return { h: match[1], s: match[2], l: match[3], a: match[4] };\n    }\n    if ((match = matchers.hsv.exec(color))) {\n        return { h: match[1], s: match[2], v: match[3] };\n    }\n    if ((match = matchers.hsva.exec(color))) {\n        return { h: match[1], s: match[2], v: match[3], a: match[4] };\n    }\n    if ((match = matchers.hex8.exec(color))) {\n        return {\n            r: parseIntFromHex(match[1]),\n            g: parseIntFromHex(match[2]),\n            b: parseIntFromHex(match[3]),\n            a: convertHexToDecimal(match[4]),\n            format: named ? \"name\" : \"hex8\"\n        };\n    }\n    if ((match = matchers.hex6.exec(color))) {\n        return {\n            r: parseIntFromHex(match[1]),\n            g: parseIntFromHex(match[2]),\n            b: parseIntFromHex(match[3]),\n            format: named ? \"name\" : \"hex\"\n        };\n    }\n    if ((match = matchers.hex4.exec(color))) {\n        return {\n            r: parseIntFromHex(match[1] + '' + match[1]),\n            g: parseIntFromHex(match[2] + '' + match[2]),\n            b: parseIntFromHex(match[3] + '' + match[3]),\n            a: convertHexToDecimal(match[4] + '' + match[4]),\n            format: named ? \"name\" : \"hex8\"\n        };\n    }\n    if ((match = matchers.hex3.exec(color))) {\n        return {\n            r: parseIntFromHex(match[1] + '' + match[1]),\n            g: parseIntFromHex(match[2] + '' + match[2]),\n            b: parseIntFromHex(match[3] + '' + match[3]),\n            format: named ? \"name\" : \"hex\"\n        };\n    }\n\n    return false;\n}\n\nfunction validateWCAG2Parms(parms) {\n    // return valid WCAG2 parms for isReadable.\n    // If input parms are invalid, return {\"level\":\"AA\", \"size\":\"small\"}\n    var level, size;\n    parms = parms || {\"level\":\"AA\", \"size\":\"small\"};\n    level = (parms.level || \"AA\").toUpperCase();\n    size = (parms.size || \"small\").toLowerCase();\n    if (level !== \"AA\" && level !== \"AAA\") {\n        level = \"AA\";\n    }\n    if (size !== \"small\" && size !== \"large\") {\n        size = \"small\";\n    }\n    return {\"level\":level, \"size\":size};\n}\n\n// Node: Export function\nif (typeof module !== \"undefined\" && module.exports) {\n    module.exports = tinycolor;\n}\n// AMD/requirejs: Define the module\nelse if (typeof define === 'function' && define.amd) {\n    define(function () {return tinycolor;});\n}\n// Browser: Expose to window\nelse {\n    window.tinycolor = tinycolor;\n}\n\n})(Math);\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/tinycolor2/tinycolor.js\n// module id = 16\n// module chunks = 1 2 3 4 5 6 7 8 9 10 11 12 13","/*!\n * TinyGradient 0.3.1\n * Copyright 2014-2015 Damien \"Mistic\" Sorel (http://www.strangeplanet.fr)\n * Licensed under MIT (http://opensource.org/licenses/MIT)\n */\n\n(function(root, factory) {\n    if (typeof module !== \"undefined\" && module.exports) {\n        module.exports = factory(require('tinycolor2'));\n    }\n    else if (typeof define === 'function' && define.amd) {\n        define(['tinycolor'], factory);\n    }\n    else {\n        root.tinygradient = factory(root.tinycolor);\n    }\n}(this, function(tinycolor) {\n    \"use strict\";\n\n    var Utils = {\n        rgba_max: { r: 256, g: 256, b: 256, a: 1 },\n        hsva_max: { h: 360, s: 1, v: 1, a: 1 },\n\n        /**\n         * Linearly compute the step size between start and end (not normalized)\n         * @param {Object} start - rgba or hsva\n         * @param {Object} end - rgba or hsva\n         * @param {Integer} steps - number of desired steps\n         * @return {Object} rgba or hsva\n         */\n        stepize: function(start, end, steps) {\n            var step = {};\n\n            for (var k in start) {\n                if (start.hasOwnProperty(k)) {\n                    step[k] = (end[k]-start[k]) / steps;\n                }\n            }\n\n            return step;\n        },\n\n        /**\n         * Compute the final step color\n         * @param {Object} step - rgba or hsva from `stepize`\n         * @param {Object} start - rgba or hsva\n         * @param {Integer} i - color index\n         * @param {Object} max - rgba or hsva of maximum values for each channel\n         * @return {Object} rgba or hsva\n         */\n        interpolate: function(step, start, i, max) {\n            var color = {};\n\n            for (var k in start) {\n                if (start.hasOwnProperty(k)) {\n                    color[k] = step[k] * i + start[k];\n                    color[k] = color[k]<0 ? color[k]+max[k] : ( max[k]!=1 ? color[k]%max[k] : color[k] );\n                }\n            }\n\n            return color;\n        },\n\n        /**\n         * Generate gradient with RGBa interpolation\n         * @param {Object} stop1\n         * @param {Object} stop2\n         * @param {Integer} steps\n         * @param {tinycolor[]} color1 included, color2 excluded\n         */\n        rgb: function(stop1, stop2, steps) {\n            var start = stop1.color.toRgb(),\n                end = stop2.color.toRgb(),\n                gradient = [stop1.color],\n                step = Utils.stepize(start, end, steps),\n                color;\n\n            for (var i=1; i<steps; i++) {\n                color = Utils.interpolate(step, start, i, Utils.rgba_max);\n                gradient.push(tinycolor(color));\n            }\n\n            return gradient;\n        },\n\n        /**\n         * Generate gradient with HSVa interpolation\n         * @param {Object} stop1\n         * @param {Object} stop2\n         * @param {Integer} steps\n         * @param {Boolean} trigonometric - true to step in trigonometric order\n         * @param {tinycolor[]} color1 included, color2 excluded\n         */\n        hsv: function(stop1, stop2, steps, trigonometric) {\n            var start = stop1.color.toHsv(),\n                end = stop2.color.toHsv(),\n                gradient = [stop1.color],\n                step = Utils.stepize(start, end, steps),\n                diff, color;\n\n            // recompute hue\n            if ((start.h <= end.h && !trigonometric) || (start.h >= end.h && trigonometric)) {\n                diff = end.h-start.h;\n            }\n            else if (trigonometric) {\n                diff = 360-end.h+start.h;\n            }\n            else {\n                diff = 360-start.h+end.h;\n            }\n            step.h = Math.pow(-1, trigonometric) * Math.abs(diff)*1.0 / steps;\n\n            for (var i=1; i<steps; i++) {\n                color = Utils.interpolate(step, start, i, Utils.hsva_max);\n                gradient.push(tinycolor(color));\n            }\n\n            return gradient;\n        },\n\n        /**\n         * Compute substeps between each stops\n         * @param {Object[]} stops\n         * @param {Integer} steps\n         * @return {Integer[]}\n         */\n        substeps: function(stops, steps) {\n            var l = stops.length;\n\n            // validation\n            steps = parseInt(steps);\n\n            if (isNaN(steps) || steps < 2) {\n                throw new Error('Invalid number of steps (< 2)');\n            }\n            if (steps < l) {\n                throw new Error('Number of steps cannot be inferior to number of stops');\n            }\n\n            // compute substeps from stop positions\n            var substeps = [];\n\n            for (var i=1; i<l; i++) {\n                var step = (steps-1) * (stops[i].pos-stops[i-1].pos);\n                substeps.push(Math.max(1, Math.round(step)));\n            }\n\n            // adjust number of steps\n            var totalSubsteps = 1;\n            for (var n=l-1; n--;) totalSubsteps+= substeps[n];\n\n            while (totalSubsteps != steps) {\n                if (totalSubsteps < steps) {\n                    var min = Math.min.apply(null, substeps);\n                    substeps[substeps.indexOf(min)]++;\n                    totalSubsteps++;\n                }\n                else {\n                    var max = Math.max.apply(null, substeps);\n                    substeps[substeps.indexOf(max)]--;\n                    totalSubsteps--;\n                }\n            }\n\n            return substeps;\n        }\n    };\n\n    /**\n     * @class tinygradient\n     * @param {mixed} stops\n     */\n    var TinyGradient = function(stops) {\n        // varargs\n        if (arguments.length == 1) {\n            if (!(arguments[0] instanceof Array)) {\n                throw new Error('\"stops\" is not an array');\n            }\n            stops = arguments[0];\n        }\n        else {\n            stops = Array.prototype.slice.call(arguments);\n        }\n\n        // if we are called as a function, call using new instead\n        if (!(this instanceof TinyGradient)) {\n            return new TinyGradient(stops);\n        }\n\n        // validation\n        if (stops.length < 2) {\n            throw new Error('Invalid number of stops (< 2)');\n        }\n\n        var havingPositions = stops[0].pos !== undefined,\n            l = stops.length,\n            p = -1;\n        // create tinycolor objects and clean positions\n        this.stops = stops.map(function(stop, i) {\n            var hasPosition = stop.pos !== undefined;\n            if (havingPositions ^ hasPosition) {\n                throw new Error('Cannot mix positionned and not posionned color stops');\n            }\n\n            if (hasPosition) {\n                stop = {\n                    color: tinycolor(stop.color),\n                    pos: stop.pos\n                };\n\n                if (stop.pos < 0 || stop.pos > 1) {\n                    throw new Error('Color stops positions must be between 0 and 1');\n                }\n                else if (stop.pos <= p) {\n                    throw new Error('Color stops positions are not ordered');\n                }\n                p = stop.pos;\n            }\n            else {\n                stop = {\n                    color: tinycolor(stop),\n                    pos: i/(l-1)\n                };\n            }\n\n            return stop;\n        });\n\n        if (this.stops[0].pos !== 0) {\n            this.stops.unshift({\n                color: this.stops[0].color,\n                pos: 0\n            });\n        }\n        if (this.stops[this.stops.length-1].pos !== 1) {\n            this.stops.push({\n                color: this.stops[this.stops.length-1].color,\n                pos: 1\n            });\n        }\n    };\n\n    /**\n     * Return new instance with reversed stops\n     * @return {tinygradient}\n     */\n    TinyGradient.prototype.reverse = function() {\n        var stops = [];\n\n        this.stops.forEach(function(stop) {\n            stops.push({\n                color: stop.color,\n                pos: 1 - stop.pos\n            });\n        });\n\n        return new TinyGradient(stops.reverse());\n    };\n\n    /**\n     * Generate gradient with RGBa interpolation\n     * @param {Integer} steps\n     * @return {tinycolor[]}\n     */\n    TinyGradient.prototype.rgb = function(steps) {\n        var substeps = Utils.substeps(this.stops, steps),\n            gradient = [];\n\n        for (var i=0, l=this.stops.length; i<l-1; i++) {\n            gradient = gradient.concat(Utils.rgb(this.stops[i], this.stops[i+1], substeps[i]));\n        }\n\n        gradient.push(this.stops[l-1].color);\n\n        return gradient;\n    };\n\n    /**\n     * Generate gradient with HSVa interpolation\n     * @param {Integer} steps\n     * @param {Boolean|String} [mode=false]\n     *    - false to step in clockwise\n     *    - true to step in trigonometric order\n     *    - 'short' to use the shortest way\n     *    - 'long' to use the longest way\n     * @return {tinycolor[]}\n     */\n    TinyGradient.prototype.hsv = function(steps, mode) {\n        var substeps = Utils.substeps(this.stops, steps),\n            trigonometric = mode === true,\n            parametrized = typeof mode === 'string',\n            gradient = [],\n            start, end, trig;\n\n        for (var i=0, l=this.stops.length; i<l-1; i++) {\n            start = this.stops[i].color.toHsv();\n            end = this.stops[i+1].color.toHsv();\n                \n            if (parametrized) {\n                trig = (start.h < end.h && end.h-start.h < 180) || (start.h > end.h && start.h-end.h > 180);\n            }\n            \n            // rgb interpolation if one of the steps in grayscale\n            if (start.s===0 || end.s===0) {\n                gradient = gradient.concat(Utils.rgb(this.stops[i], this.stops[i+1], substeps[i]));\n            }\n            else {\n                gradient = gradient.concat(Utils.hsv(this.stops[i], this.stops[i+1], substeps[i],\n                  (mode==='long' && trig) || (mode==='short' && !trig) || (!parametrized && trigonometric)\n                ));\n            }\n        }\n\n        gradient.push(this.stops[l-1].color);\n\n        return gradient;\n    };\n\n    /**\n     * Generate CSS3 command (no prefix) for this gradient\n     * @param {String} [mode=linear] - 'linear' or 'radial'\n     * @param {String} [direction] - default is 'to right' or 'ellipse at center'\n     * @return {String}\n     */\n    TinyGradient.prototype.css = function(mode, direction) {\n        mode = mode || 'linear';\n        direction = direction || (mode=='linear' ? 'to right' : 'ellipse at center');\n\n        var css = mode + '-gradient(' + direction;\n        this.stops.forEach(function(stop) {\n            css+= ', ' + stop.color.toRgbString() + ' ' + (stop.pos*100) + '%';\n        });\n        css+= ')';\n        return css;\n    };\n\n\n    /**\n     * Initialize and create gradient with RGBa interpolation\n     * @see TinyGradient::rgb\n     */\n    TinyGradient.rgb = function(colors, steps) {\n        colors = Array.prototype.slice.call(arguments);\n        steps = colors.pop();\n\n        return TinyGradient.apply(null, colors).rgb(steps);\n    };\n\n    /**\n     * Initialize and create gradient with HSVa interpolation\n     * @see TinyGradient::hsv\n     */\n    TinyGradient.hsv = function(colors, steps, mode) {\n        colors = Array.prototype.slice.call(arguments);\n        mode = colors.pop();\n        steps = colors.pop();\n\n        return TinyGradient.apply(null, colors).hsv(steps, mode);\n    };\n\n    /**\n     * Initialize and generate CSS3 command for gradient\n     * @see TinyGradient::css\n     */\n    TinyGradient.css = function(colors, mode, direction) {\n        colors = Array.prototype.slice.call(arguments);\n        direction = colors.pop();\n        mode = colors.pop();\n\n        return TinyGradient.apply(null, colors).css(mode, direction);\n    };\n\n\n    // export\n    return TinyGradient;\n}));\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/tinygradient/tinygradient.js\n// module id = 17\n// module chunks = 1 2 3 4 5 6 7 8 9 10 11 12 13","import React from 'react';\nimport { createComponent } from 'react-fela';\nimport colors from '../../utils/colors';\n\nconst Block = ({ className, children }) => {\n  return <div className={className}>{children}</div>;\n};\n\nexport default createComponent(\n  props => ({\n    minWidth: '16px',\n    height: '16px',\n    float: 'left',\n    textAlign: 'center',\n    padding: '15px',\n    border: 'none',\n    fontWeight: 'bold',\n    backgroundColor: props.isPrimary ? colors[props.i][1] : colors[props.i][0],\n\n    '&:hover': {\n      backgroundColor: 'black',\n      color: 'white',\n    },\n  }),\n  Block\n);\n\n\n\n// WEBPACK FOOTER //\n// ./src/scenes/Fela/Block.js","import { createComponent } from 'react-fela';\n\nimport config from '../../config';\nimport Block from './Block';\n\nconst components = [];\n\nfor (let i = 0; i < config.size; i++) {\n  let size = Math.round(i / 10 % 1 * 10);\n\n  const component = createComponent(\n    props => ({\n      float: 'none',\n      display: 'inline-block',\n      border: `${size + 2}px solid #000`,\n      borderRadius: `${size * 6}px`,\n    }),\n    Block\n  );\n\n  components.push(component);\n}\n\nexport default components;\n\n\n\n// WEBPACK FOOTER //\n// ./src/scenes/Fela/DifferentBlocks.js"],"sourceRoot":""}